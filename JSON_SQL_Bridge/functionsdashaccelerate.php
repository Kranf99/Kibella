<?php
/*
 JSON_SQL_Bridge 1.0
 Copyright 2016 Frank Vanden berghen
 All Right reserved.

 JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License".
 If you are interested in distributing, reselling, modifying, contibuting or in general creating
 any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
 */
namespace kibella; function O4w($l3c,&$l4x) { if (array_search($l3c,$l4x["values"]) === FALSE) { $l4x["values"][]=$l3c; } } function O4x($l4y,$l3u,$O4y,$l3a,&$l4z,&$O4z) { $l50=array_keys($l3u); $O50=count($l3u); if ($l3a+1<$O50) $l51=TRUE; else $l51=FALSE; if ($l51) $O51=$l50[$l3a+1]; $l52=$l3u[$l4y]["type"]; $O52=$l3u[$l4y]["ifield"]; $l53=$l3u[$l4y]["interval"]; if (array_key_exists($O52,$l4z) === FALSE) { $l4z[$O52]=array("type" => $l52,"values" => array(),"interval" => $l53); } switch ($l52) { case ("h"): case ("hd"): case ("t"): foreach ($O4y as $O53) { $l3c=$O53["key"]; if ($l52 == "hd") { $l3c=$l3c/01750; } if ($l51) { $O4z[$l3c]=array(); if (array_key_exists($O51,$O53)) { $l54=$O53[$O51][l26]; O4x($O51,$l3u,$l54,$l3a+1,$l4z,$O4z[$l3c]); } } else { $O4z[]=$l3c; } O4w($l3c,$l4z[$O52]); } break; case ("r"): case ("rd"): foreach ($O4y as $l3c => $O53) { if ($l51) { $O4z[$l3c]=array(); if (array_key_exists($O51,$O53)) { $l54=$O53[$O51][l26]; O4x($O51,$l3u,$l54,$l3a+1,$l4z,$O4z[$l3c]); } } else { $O4z[]=$l3c; } O4w($l3c,$l4z[$O52]); } break; default : break; } } function O54($l55,$O55) { $l56=array(); $l4z=array(); $O4z=array(); $O56=json_decode($l55,TRUE); assert(array_key_exists("xaggs",$O55),"The parsed query array contains the attribute 'xaggs'"); $l57=$O55["xaggs"]; $l50=array(); foreach ($l57 as $O57) { assert(array_key_exists("ofield",$O57),"The array with the aggregation info contains the attribute 'ofield'"); assert(array_key_exists("type",$O57),"The array with the aggregation info contains the attribute 'type'"); $l50[]=$O57["ofield"]; if ($O57["type"] == "h" || $O57["type"] == "hd") { assert(array_key_exists("interval",$O57),"The array with the aggregation info contains the attribute 'interval'"); $l53=$O57["interval"]; } else { $l53=NULL; } assert(array_key_exists("ifieldname",$O57),"The array with the aggregation info contains the attribute 'ifieldname'"); $l56[$O57["ofield"]]=array("type" => $O57["type"],"ifield" => $O57["ifieldname"],"interval" => $l53); } if (array_key_exists(l23,$O56)) { $l58=$O56[l23]; $l3a=-1; $l4y=$l50[0]; $O4y=$l58[$l4y][l26]; O4x($l4y,$l56,$O4y,$l3a+1,$l4z,$O4z); } $O58=count($O4z); if (0<$O58 && $O58<=ACCELERATEMAX) { if (DEBUG) { showmessage( __FUNCTION__ ,"note","Multi-level filter values\n"); l59($O4z); } return array("Fields and Values" => $l4z,"Multilevel Values" => $O4z); } else { return FALSE; } } function O59(&$l5a,$O5a,$l52,$l53,$l3c,$l5b="") { global $O5b; switch ($l52) { case ("t"): $l5a.=$l5b."{"."\"query\":{"."\"match\":{".$O5a.":{"."\"query\":\"".$l3c."\","."\"type\":\"phrase\""."}"."}"."}"."}"; break; case ("h"): case ("hd"): if ($l52 == "hd") { $l5c=$l3c*01750; } else { $l5c=$l3c; } $l5a.=$l5b."{"."\"range\":{".$O5a.":{"."\"gte\":".$l5c.","; if ($l52 == "h") { assert(is_numeric($l53),"The histogram interval (bin size) is a number or numeric string"); $O5c=$l5c+$l53; $l5a.="\"lt\":".$O5c; } else { $O4h=max(1,round(substr($l53,0,strlen($l53)-1)))*1; $l4i=substr($l53,strlen($l53)-1); $l5d=date_create(gmstrftime("%Y-%m-%d %H:%M:%S",$l5c/01750),new \datetimezone("UTC")); $O5d=(array) $l5d; date_modify($l5d,"$O4h ".$O5b[$l4i]); $O5d=(array) $l5d; $O5c=date_timestamp_get($l5d); $l5a.="\"lte\":".($O5c*01750-1); } $l5a.="}"."}"."}"; break; case ("r"): case ("rd"): $l5e=l4k($l3c); $l5c=$l5e[0]; $O5c=$l5e[1]; $l5a.=$l5b."{"."\"range\":{".$O5a.":{"."\"gte\":".$l5c.","."\"lt\":".$O5c."}"."}"."}"; break; default : break; } } function O5e($l5f,$l5a) { $O5f=FALSE; if ($l5a != NULL && trim($l5a) !== "") { $O5f=TRUE; $l5g=json_decode($l5a,TRUE); } foreach ($l5f["objects"] as $O5g) { $l5h=$O5g["id"]; $l31=$O5g["tableid"]; $O5h=$O5g["query"]; if ($O5h != NULL) { if ($O5f === TRUE) { $l5i=json_decode($O5h,TRUE); if (array_key_exists("query",$l5i)) { $l5i["query"]=$l5g; } $O5h=json_encode($l5i); } $O5i=l5j($l31,$O5h); $O5j=lz($O5i); } if (DEBUG) showmessage( __FUNCTION__ ,"note","\t\t*********** FILTER QUERY for object $l5h **************\n\t\t$O5h\n"); } } function l5k($l5f,$O5k) { if (DEBUG) { showmessage( __FUNCTION__ ,"note","Objects in dashboard to be accelerated:\n"); l59($l5f); showmessage( __FUNCTION__ ,"note","Filters to apply:\n"); l59($O5k); } O5e($l5f,""); $l5l="{"."\"filtered\":{"."\"query\":{"."\"query_string\":{"."\"query\":\"*\","."\"analyze_wildcard\":true"."}"."},"."\"filter\":{"."\"bool\":{"."\"must\":["; $O5l=",{"."\"query\":{"."\"query_string\":{"."\"analyze_wildcard\":true,"."\"query\":\"*\""."}"."}"."}"."],"."\"must_not\":[]"."}"."}"."}"."}"; foreach ($O5k as $l5m => $O5m) { $l5n=array(); foreach ($O5m["Fields and Values"] as $O5a => $O5n) { $l52=$O5n["type"]; $l53=$O5n["interval"]; $l5n[]=array("field" => $O5a,"type" => $l52,"interval" => $l53); foreach ($O5n["values"] as $l3c) { $l5a=$l5l; O59($l5a,$O5a,$l52,$l53,$l3c); $l5a.=$O5l; O5e($l5f,$l5a); } } $l5o=count($l5n); if ($l5o>1) { O37($O5m["Multilevel Values"],"kibella\\dashAddMultiLevelFilterAndAccelerateObjects",array($l5f,$l5n,$l5l,$O5l)); } } } function dashaddmultilevelfilterandaccelerateobjects($l3c,$O3b,$O39,$l3a,$O3a,$l39) { static $O5o; static $l5p; static $O5p; static $l5q; static $O5q; assert(count($l39) == 4,"The parameters array has exactly 4 elements"); if ($O39 == 0 && $l3a == 0) { $O5o=$l39[0]; $l5p=$l39[1]; $l5q=$l39[2]; $O5p=array($l5q); $O5q=$l39[3]; } assert(count($l5p)>$l3a,"The number of elements in the aFieldsInfo array is larger than the current level (numel=".count($l5p)."), level=$l3a)"); $O5a=$l5p[$l3a]["field"]; $l52=$l5p[$l3a]["type"]; $l53=$l5p[$l3a]["interval"]; if (is_array($l3c)) { $l5r=$O3b; $O5p[]=$O5p[$l3a]; if ($l3a == 0) { $l5b=""; } else { $l5b=","; } O59($O5p[$l3a+1],$O5a,$l52,$l53,$l5r,$l5b=$l5b); } else { $l5r=$l3c; $l5a=$O5p[$l3a]; O59($l5a,$O5a,$l52,$l53,$l5r,$l5b=","); $l5a.=$O5q; O5e($O5o,$l5a); if ($O39 == $O3a-1) { array_pop($O5p); } } } function O5r($l31,$l5s) { $O5s=l5t($l31)["cache"]; if ($O5s) { if (LOG) { showmessage( __FUNCTION__ ,"note","$l31 - Accelerating dashboard...\n"); } $O5t=array(); if (array_key_exists("panelsJSON",$l5s)) { $l5u=json_decode($l5s["panelsJSON"],TRUE); foreach ($l5u as $O5u) { if (array_key_exists("id",$O5u)) { $l5v=dbcreatedbh(KIBELLADB); $O5v=dbdbhexecutesqlquery($l5v->getdbhandle(),"select * from ".l3." where ".l4." <> '".O4."' and ".O3." = '".$O5u["id"]."'"); $l5v->close(); if (count($O5v)>0) { assert(count($O5v) == 1,"There is only one object that matches the searched ID"); $O5h=$O5v[0][O1r]; $l5w["objects"][]=array("id" => $O5u["id"],"tableid" => $l31,"query" => $O5h); if ($O5h != NULL) { $O5i=l5j($l31,$O5h); $O5w=lz($O5i); $ly=$O5w["responseFile"]; $O55=$O5w["parsedQuery"]; if ($ly !== FALSE) { $l55=file_get_contents($ly); } $O5k=O54($l55,$O55); if ($O5k !== FALSE) { $O5t[$O5u["id"]]=$O5k; } } } } } if (count($O5t)>0) { l5k($l5w,$O5t); } } } } function dashacceleratealldashboards($l31,$lx=FALSE) { $O5s=l5t($l31)["cache"]; if ($O5s) { $l5x=O5x($l31); if ($l5x !== FALSE) { foreach ($l5x as $l5y) { if ($lx) echo "<pre>Accelerating dashboard ".$l5y[O3]."...</pre>"; ob_flush(); $l5s=json_decode($l5y[l1r],TRUE); O5r($l31,$l5s); } } } } function dashacceleratetopqueries($l31,$O32=l2z,$lx=FALSE) { $O5s=l5t($l31)["cache"]; if ($O5s && $O32>0) { $O5y=l5z($l31); if ($O5y !== FALSE) { $O5z=0; foreach ($O5y as $l60) { $O5z += $l60["n"]; $O60=$l60["counter"]; } $l61=0; $O61=$O5y[0]["counter"]; foreach ($O5y as $l60) { $l61 += $l60["n"]; if ($l61/$O5z>$O32/0144) { $O60=$O61; break; } $O61=$l60["counter"]; } if ($lx) echo "<pre>=> Queries to accelerate should have been run at least $O60 times.</pre>"; $l62=O62($l31,$O60); if ($l62 !== FALSE) { $O3u=0; foreach ($l62 as $l5i) { $O3u ++; $l63=$l5i[O1s]; $O63=$l5i[O1u]; if ($lx) echo "<pre>Running query $O3u with MD5 $l63 (run $O63 times)</pre>"; $O5h=$l5i[l1u]; $O5i=l5j($l31,$O5h); lz($O5i); } } } } }