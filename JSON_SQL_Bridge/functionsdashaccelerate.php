<?php
/*
JSON_SQL_Bridge 1.1
Copyright 2016 Frank Vanden berghen
All Right reserved.

JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License". 
If you are interested in distributing, reselling, modifying, contibuting or in general creating 
any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
*/
namespace kibella; function l3m($l26,&$O3m) { if (array_search($l26,$O3m["values"]) === FALSE) { $O3m["values"][]=$l26; } } function l3n($O3n,$l2h,$l3o,$l24,&$O3o,&$l3p) { $O3p=array_keys($l2h); $l3q=count($l2h); if ($l24+1<$l3q) $O3q=TRUE; else $O3q=FALSE; if ($O3q) $l3r=$O3p[$l24+1]; $O3r=$l2h[$O3n]["type"]; $l3s=$l2h[$O3n]["ifield"]; $O3s=$l2h[$O3n]["interval"]; if (array_key_exists($l3s,$O3o) === FALSE) { $O3o[$l3s]=array("type" => $O3r,"values" => array(),"interval" => $O3s); } switch ($O3r) { case ("h"): case ("hd"): case ("t"): foreach ($l3o as $l3t) { $l26=$l3t["key"]; if ($O3r == "hd") { $l26=$l26/01750; } if ($O3q) { $l3p[$l26]=array(); if (array_key_exists($l3r,$l3t)) { $O3t=$l3t[$l3r][O16]; l3n($l3r,$l2h,$O3t,$l24+1,$O3o,$l3p[$l26]); } } else { $l3p[]=$l26; } l3m($l26,$O3o[$l3s]); } break; case ("r"): case ("rd"): foreach ($l3o as $l26 => $l3t) { if ($O3q) { $l3p[$l26]=array(); if (array_key_exists($l3r,$l3t)) { $O3t=$l3t[$l3r][O16]; l3n($l3r,$l2h,$O3t,$l24+1,$O3o,$l3p[$l26]); } } else { $l3p[]=$l26; } l3m($l26,$O3o[$l3s]); } break; default : break; } } function l3u($O3u,$l3v) { $O3v=array(); $O3o=array(); $l3p=array(); $l3w=json_decode($O3u,TRUE); assert(array_key_exists("xaggs",$l3v),"The parsed query array contains the attribute 'xaggs'"); $O3w=$l3v["xaggs"]; $O3p=array(); foreach ($O3w as $l3x) { assert(array_key_exists("ofield",$l3x),"The array with the aggregation info contains the attribute 'ofield'"); assert(array_key_exists("type",$l3x),"The array with the aggregation info contains the attribute 'type'"); $O3p[]=$l3x["ofield"]; if ($l3x["type"] == "h" || $l3x["type"] == "hd") { assert(array_key_exists("interval",$l3x),"The array with the aggregation info contains the attribute 'interval'"); $O3s=$l3x["interval"]; } else { $O3s=NULL; } assert(array_key_exists("ifieldname",$l3x),"The array with the aggregation info contains the attribute 'ifieldname'"); $O3v[$l3x["ofield"]]=array("type" => $l3x["type"],"ifield" => $l3x["ifieldname"],"interval" => $O3s); } if (array_key_exists(O13,$l3w)) { $O3x=$l3w[O13]; $l24=-1; $O3n=$O3p[0]; $l3o=$O3x[$O3n][O16]; l3n($O3n,$O3v,$l3o,$l24+1,$O3o,$l3p); } $l3y=count($l3p); if (0<$l3y && $l3y<=ACCELERATEMAX) { if (DEBUG) { O2f( __FUNCTION__ ,"note","Multi-level filter values\n"); O3y($l3p); } return array("Fields and Values" => $O3o,"Multilevel Values" => $l3p); } else { return FALSE; } } function l3z(&$O3z,$l40,$O3r,$O3s,$l26,$O40="") { global $l41; switch ($O3r) { case ("t"): $O3z.=$O40."{"."\"query\":{"."\"match\":{".$l40.":{"."\"query\":\"".$l26."\","."\"type\":\"phrase\""."}"."}"."}"."}"; break; case ("h"): case ("hd"): if ($O3r == "hd") { $O41=$l26*01750; } else { $O41=$l26; } $O3z.=$O40."{"."\"range\":{".$l40.":{"."\"gte\":".$O41.","; if ($O3r == "h") { assert(is_numeric($O3s),"The histogram interval (bin size) is a number or numeric string"); $l42=$O41+$O3s; $O3z.="\"lt\":".$l42; } else { $O32=max(1,round(substr($O3s,0,strlen($O3s)-1)))*1; $l33=substr($O3s,strlen($O3s)-1); $O42=date_create(gmstrftime("%Y-%m-%d %H:%M:%S",$O41/01750),new \datetimezone("UTC")); $l43=(array) $O42; date_modify($O42,"$O32 ".$l41[$l33]); $l43=(array) $O42; $l42=date_timestamp_get($O42); $O3z.="\"lte\":".($l42*01750-1); } $O3z.="}"."}"."}"; break; case ("r"): case ("rd"): $O43=l35($l26); $O41=$O43[0]; $l42=$O43[1]; $O3z.=$O40."{"."\"range\":{".$l40.":{"."\"gte\":".$O41.","."\"lt\":".$l42."}"."}"."}"; break; default : break; } } function l44($O44,$O3z) { $l45=FALSE; if ($O3z != NULL && trim($O3z) !== "") { $l45=TRUE; $O45=json_decode($O3z,TRUE); } foreach ($O44["objects"] as $l46) { $O46=$l46["id"]; $l1x=$l46["tableid"]; $l47=$l46["query"]; if ($l47 != NULL) { if ($l45 === TRUE) { $O47=json_decode($l47,TRUE); if (array_key_exists("query",$O47)) { $O47["query"]=$O45; } $l47=json_encode($O47); } $l48=O48($l1x,$l47); } if (DEBUG) O2f( __FUNCTION__ ,"note","\t\t*********** FILTER QUERY for object $O46 **************\n\t\t$l47\n"); } } function l49($O44,$O49) { if (DEBUG) { O2f( __FUNCTION__ ,"note","Objects in dashboard to be accelerated:\n"); O3y($O44); O2f( __FUNCTION__ ,"note","Filters to apply:\n"); O3y($O49); } l44($O44,""); $l4a="{"."\"filtered\":{"."\"query\":{"."\"query_string\":{"."\"query\":\"*\","."\"analyze_wildcard\":true"."}"."},"."\"filter\":{"."\"bool\":{"."\"must\":["; $O4a=",{"."\"query\":{"."\"query_string\":{"."\"analyze_wildcard\":true,"."\"query\":\"*\""."}"."}"."}"."],"."\"must_not\":[]"."}"."}"."}"."}"; foreach ($O49 as $l4b => $O4b) { $l4c=array(); foreach ($O4b["Fields and Values"] as $l40 => $O4c) { $O3r=$O4c["type"]; $O3s=$O4c["interval"]; $l4c[]=array("field" => $l40,"type" => $O3r,"interval" => $O3s); foreach ($O4c["values"] as $l26) { $O3z=$l4a; l3z($O3z,$l40,$O3r,$O3s,$l26); $O3z.=$O4a; l44($O44,$O3z); } } $l4d=count($l4c); if ($l4d>1) { O21($O4b["Multilevel Values"],"kibella\\dashAddMultiLevelFilterAndAccelerateObjects",array($O44,$l4c,$l4a,$O4a)); } } } function dashaddmultilevelfilterandaccelerateobjects($l26,$O25,$O23,$l24,$O24,$l23) { static $O4d; static $l4e; static $O4e; static $l4f; static $O4f; assert(count($l23) == 4,"The parameters array has exactly 4 elements"); if ($O23 == 0 && $l24 == 0) { $O4d=$l23[0]; $l4e=$l23[1]; $l4f=$l23[2]; $O4e=array($l4f); $O4f=$l23[3]; } assert(count($l4e)>$l24,"The number of elements in the aFieldsInfo array is larger than the current level (numel=".count($l4e)."), level=$l24)"); $l40=$l4e[$l24]["field"]; $O3r=$l4e[$l24]["type"]; $O3s=$l4e[$l24]["interval"]; if (is_array($l26)) { $l4g=$O25; $O4e[]=$O4e[$l24]; if ($l24 == 0) { $O40=""; } else { $O40=","; } l3z($O4e[$l24+1],$l40,$O3r,$O3s,$l4g,$O40=$O40); } else { $l4g=$l26; $O3z=$O4e[$l24]; l3z($O3z,$l40,$O3r,$O3s,$l4g,$O40=","); $O3z.=$O4f; l44($O4d,$O3z); if ($O23 == $O24-1) { array_pop($O4e); } } } function O4g($l1x,$l4h) { $O4h=l4i($l1x)["cache"]; if ($O4h) { if (LOG) { O2f( __FUNCTION__ ,"note","$l1x - Accelerating dashboard...\n"); } $O4i=array(); if (array_key_exists("panelsJSON",$l4h)) { $l4j=json_decode($l4h["panelsJSON"],TRUE); foreach ($l4j as $O4j) { if (array_key_exists("id",$O4j)) { $l4k=O4k("select * from ".Oq." where ".Ok." <> '".Oa."' and ".ll." = '".$O4j["id"]."'",KIBELLADB,TABLESDIR,$l4l="query",$O4l="sqlite"); if (count($l4k)>0) { assert(count($l4k) == 1,"There is only one object that matches the searched ID"); $l47=$l4k[0][Os]; $l4m["objects"][]=array("id" => $O4j["id"],"tableid" => $l1x,"query" => $l47); if ($l47 != NULL) { $O4m=O48($l1x,$l47); $l4n=$O4m["responseFile"]; $l3v=$O4m["parsedQuery"]; if ($l4n !== FALSE) { $O3u=file_get_contents($l4n); } $O49=l3u($O3u,$l3v); if ($O49 !== FALSE) { $O4i[$O4j["id"]]=$O49; } } } } } if (count($O4i)>0) { l49($l4m,$O4i); } } } } function dashacceleratealldashboards($l1x,$O1y=FALSE) { $O4h=l4i($l1x)["cache"]; if ($O4h) { $O4n=l4o($l1x); if ($O4n !== FALSE) { foreach ($O4n as $O4o) { if ($O1y) echo "<pre>Accelerating dashboard ".$O4o[ll]."...</pre>"; ob_flush(); $l4h=json_decode($O4o[ls],TRUE); O4g($l1x,$l4h); } } } } function dashacceleratetopqueries($l1x,$l1z=O3i,$O1y=FALSE) { $O4h=l4i($l1x)["cache"]; if ($O4h && $l1z>0) { $l4p=O4p($l1x); if ($l4p !== FALSE) { $l4q=0; foreach ($l4p as $O4q) { $l4q += $O4q["n"]; $l4r=$O4q["counter"]; } $O4r=0; $l4s=$l4p[0]["counter"]; foreach ($l4p as $O4q) { $O4r += $O4q["n"]; if ($O4r/$l4q>$l1z/0144) { $l4r=$l4s; break; } $l4s=$O4q["counter"]; } if ($O1y) echo "<pre>=> Queries to accelerate should have been run at least $l4r times.</pre>"; $O4s=l4t($l1x,$l4r); if ($O4s !== FALSE) { $O2h=0; foreach ($O4s as $O47) { $O2h ++; $O4t=$O47[lu]; $l4u=$O47[lw]; if ($O1y) echo "<pre>Running query $O2h with MD5 $O4t (run $l4u times)</pre>"; $l47=$O47[Ov]; O48($l1x,$l47); } } } } }