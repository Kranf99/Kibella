<?php
/*
 JSON_SQL_Bridge 1.0
 Copyright 2016 Frank Vanden berghen
 All Right reserved.

 JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License".
 If you are interested in distributing, reselling, modifying, contibuting or in general creating
 any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
 */
namespace kibella; function l50($O3c,&$O50) { if (array_search($O3c,$O50["values"]) === FALSE) { $O50["values"][]=$O3c; } } function l51($O51,$O3u,$l52,$O3a,&$O52,&$l53) { $O53=array_keys($O3u); $l54=count($O3u); if ($O3a+1<$l54) $O54=TRUE; else $O54=FALSE; if ($O54) $l55=$O53[$O3a+1]; $O55=$O3u[$O51]["type"]; $l56=$O3u[$O51]["ifield"]; $O56=$O3u[$O51]["interval"]; if (array_key_exists($l56,$O52) === FALSE) { $O52[$l56]=array("type" => $O55,"values" => array(),"interval" => $O56); } switch ($O55) { case ("h"): case ("hd"): case ("t"): foreach ($l52 as $l57) { $O3c=$l57["key"]; if ($O55 == "hd") { $O3c=$O3c/01750; } if ($O54) { $l53[$O3c]=array(); if (array_key_exists($l55,$l57)) { $O57=$l57[$l55][O26]; l51($l55,$O3u,$O57,$O3a+1,$O52,$l53[$O3c]); } } else { $l53[]=$O3c; } l50($O3c,$O52[$l56]); } break; case ("r"): case ("rd"): foreach ($l52 as $O3c => $l57) { if ($O54) { $l53[$O3c]=array(); if (array_key_exists($l55,$l57)) { $O57=$l57[$l55][O26]; l51($l55,$O3u,$O57,$O3a+1,$O52,$l53[$O3c]); } } else { $l53[]=$O3c; } l50($O3c,$O52[$l56]); } break; default : break; } } function l58($O58,$l59) { $O59=array(); $O52=array(); $l53=array(); $l5a=json_decode($O58,TRUE); assert(array_key_exists("xaggs",$l59),"The parsed query array contains the attribute 'xaggs'"); $O5a=$l59["xaggs"]; $O53=array(); foreach ($O5a as $l5b) { assert(array_key_exists("ofield",$l5b),"The array with the aggregation info contains the attribute 'ofield'"); assert(array_key_exists("type",$l5b),"The array with the aggregation info contains the attribute 'type'"); $O53[]=$l5b["ofield"]; if ($l5b["type"] == "h" || $l5b["type"] == "hd") { assert(array_key_exists("interval",$l5b),"The array with the aggregation info contains the attribute 'interval'"); $O56=$l5b["interval"]; } else { $O56=NULL; } assert(array_key_exists("ifieldname",$l5b),"The array with the aggregation info contains the attribute 'ifieldname'"); $O59[$l5b["ofield"]]=array("type" => $l5b["type"],"ifield" => $l5b["ifieldname"],"interval" => $O56); } if (array_key_exists(O23,$l5a)) { $O5b=$l5a[O23]; $O3a=-1; $O51=$O53[0]; $l52=$O5b[$O51][O26]; l51($O51,$O59,$l52,$O3a+1,$O52,$l53); } $l5c=count($l53); if (0<$l5c && $l5c<=ACCELERATEMAX) { if (DEBUG) { showmessage( __FUNCTION__ ,"note","Multi-level filter values\n"); O5c($l53); } return array("Fields and Values" => $O52,"Multilevel Values" => $l53); } else { return FALSE; } } function l5d(&$O5d,$O48,$O55,$O56,$O3c,$l5e="") { global $O5e; switch ($O55) { case ("t"): $O5d.=$l5e."{"."\"query\":{"."\"match\":{".$O48.":{"."\"query\":\"".$O3c."\","."\"type\":\"phrase\""."}"."}"."}"."}"; break; case ("h"): case ("hd"): if ($O55 == "hd") { $l5f=$O3c*01750; } else { $l5f=$O3c; } $O5d.=$l5e."{"."\"range\":{".$O48.":{"."\"gte\":".$l5f.","; if ($O55 == "h") { assert(is_numeric($O56),"The histogram interval (bin size) is a number or numeric string"); $O5f=$l5f+$O56; $O5d.="\"lt\":".$O5f; } else { $O4j=max(1,round(substr($O56,0,strlen($O56)-1)))*1; $l4k=substr($O56,strlen($O56)-1); $l5g=date_create(gmstrftime("%Y-%m-%d %H:%M:%S",$l5f/01750),new \datetimezone("UTC")); $O5g=(array) $l5g; date_modify($l5g,"$O4j ".$O5e[$l4k]); $O5g=(array) $l5g; $O5f=date_timestamp_get($l5g); $O5d.="\"lte\":".($O5f*01750-1); } $O5d.="}"."}"."}"; break; case ("r"): case ("rd"): $l5h=l4m($O3c); $l5f=$l5h[0]; $O5f=$l5h[1]; $O5d.=$l5e."{"."\"range\":{".$O48.":{"."\"gte\":".$l5f.","."\"lt\":".$O5f."}"."}"."}"; break; default : break; } } function O5h($l5i,$O5d) { $O5i=FALSE; if ($O5d != NULL && trim($O5d) !== "") { $O5i=TRUE; $l5j=json_decode($O5d,TRUE); } foreach ($l5i["objects"] as $O5j) { $l5k=$O5j["id"]; $O31=$O5j["tableid"]; $O5k=$O5j["query"]; if ($O5k != NULL) { if ($O5i === TRUE) { $l5l=json_decode($O5k,TRUE); if (array_key_exists("query",$l5l)) { $l5l["query"]=$l5j; } $O5k=json_encode($l5l); } $O5l=l5m($O31,$O5k); $O5m=Oz($O5l); } if (DEBUG) showmessage( __FUNCTION__ ,"note","\t\t*********** FILTER QUERY for object $l5k **************\n\t\t$O5k\n"); } } function l5n($l5i,$O5n) { if (DEBUG) { showmessage( __FUNCTION__ ,"note","Objects in dashboard to be accelerated:\n"); O5c($l5i); showmessage( __FUNCTION__ ,"note","Filters to apply:\n"); O5c($O5n); } O5h($l5i,""); $l5o="{"."\"filtered\":{"."\"query\":{"."\"query_string\":{"."\"query\":\"*\","."\"analyze_wildcard\":true"."}"."},"."\"filter\":{"."\"bool\":{"."\"must\":["; $O5o=",{"."\"query\":{"."\"query_string\":{"."\"analyze_wildcard\":true,"."\"query\":\"*\""."}"."}"."}"."],"."\"must_not\":[]"."}"."}"."}"."}"; foreach ($O5n as $l5p => $O5p) { $l5q=array(); foreach ($O5p["Fields and Values"] as $O48 => $O5q) { $O55=$O5q["type"]; $O56=$O5q["interval"]; $l5q[]=array("field" => $O48,"type" => $O55,"interval" => $O56); foreach ($O5q["values"] as $O3c) { $O5d=$l5o; l5d($O5d,$O48,$O55,$O56,$O3c); $O5d.=$O5o; O5h($l5i,$O5d); } } $l5r=count($l5q); if ($l5r>1) { l38($O5p["Multilevel Values"],"kibella\\dashAddMultiLevelFilterAndAccelerateObjects",array($l5i,$l5q,$l5o,$O5o)); } } } function dashaddmultilevelfilterandaccelerateobjects($O3c,$l3c,$l3a,$O3a,$l3b,$O39) { static $O5r; static $l5s; static $O5s; static $l5t; static $O5t; assert(count($O39) == 4,"The parameters array has exactly 4 elements"); if ($l3a == 0 && $O3a == 0) { $O5r=$O39[0]; $l5s=$O39[1]; $l5t=$O39[2]; $O5s=array($l5t); $O5t=$O39[3]; } assert(count($l5s)>$O3a,"The number of elements in the aFieldsInfo array is larger than the current level (numel=".count($l5s)."), level=$O3a)"); $O48=$l5s[$O3a]["field"]; $O55=$l5s[$O3a]["type"]; $O56=$l5s[$O3a]["interval"]; if (is_array($O3c)) { $l5u=$l3c; $O5s[]=$O5s[$O3a]; if ($O3a == 0) { $l5e=""; } else { $l5e=","; } l5d($O5s[$O3a+1],$O48,$O55,$O56,$l5u,$l5e=$l5e); } else { $l5u=$O3c; $O5d=$O5s[$O3a]; l5d($O5d,$O48,$O55,$O56,$l5u,$l5e=","); $O5d.=$O5t; O5h($O5r,$O5d); if ($l3a == $l3b-1) { array_pop($O5s); } } } function O5u($O31,$l5v) { $O5v=l5w($O31)["cache"]; if ($O5v) { if (LOG) { showmessage( __FUNCTION__ ,"note","$O31 - Accelerating dashboard...\n"); } $O5w=array(); if (array_key_exists("panelsJSON",$l5v)) { $l5x=json_decode($l5v["panelsJSON"],TRUE); foreach ($l5x as $O5x) { if (array_key_exists("id",$O5x)) { $l5y=dbcreatedbconnection(KIBELLADB); $O5y=dbdbhexecutesqlquery($l5y->getdbhandle(),"select * from ".l3." where ".l4." <> '".O4."' and ".O3." = '".$O5x["id"]."'"); $l5y->close(); if (count($O5y)>0) { assert(count($O5y) == 1,"There is only one object that matches the searched ID"); $O5k=$O5y[0][l1s]; $l5z["objects"][]=array("id" => $O5x["id"],"tableid" => $O31,"query" => $O5k); if ($O5k != NULL) { $O5l=l5m($O31,$O5k); $O5z=Oz($O5l); $Oy=$O5z["responseFile"]; $l59=$O5z["parsedQuery"]; if ($Oy !== FALSE) { $O58=file_get_contents($Oy); } $O5n=l58($O58,$l59); if ($O5n !== FALSE) { $O5w[$O5x["id"]]=$O5n; } } } } } if (count($O5w)>0) { l5n($l5z,$O5w); } } } } function dashacceleratealldashboards($O31,$Ox=FALSE) { $O5v=l5w($O31)["cache"]; if ($O5v) { $l60=O60($O31); if ($l60 !== FALSE) { foreach ($l60 as $l61) { if ($Ox) echo "<pre>Accelerating dashboard ".$l61[O3]."...</pre>"; ob_flush(); $l5v=json_decode($l61[O1r],TRUE); O5u($O31,$l5v); } } } } function dashacceleratetopqueries($O31,$l33=O2z,$Ox=FALSE) { $O5v=l5w($O31)["cache"]; if ($O5v && $l33>0) { $O61=l62($O31); if ($O61 !== FALSE) { $O62=0; foreach ($O61 as $l63) { $O62 += $l63["n"]; $O63=$l63["counter"]; } $l64=0; $O64=$O61[0]["counter"]; foreach ($O61 as $l63) { $l64 += $l63["n"]; if ($l64/$O62>$l33/0144) { $O63=$O64; break; } $O64=$l63["counter"]; } if ($Ox) echo "<pre>=> Queries to accelerate should have been run at least $O63 times.</pre>"; $l65=O65($O31,$O63); if ($l65 !== FALSE) { $l3v=0; foreach ($l65 as $l5l) { $l3v ++; $l66=$l5l[l1t]; $O66=$l5l[l1v]; if ($Ox) echo "<pre>Running query $l3v with MD5 $l66 (run $O66 times)</pre>"; $O5k=$l5l[O1u]; $O5l=l5m($O31,$O5k); Oz($O5l); } } } } }