<?php
/*
JSON_SQL_Bridge
Copyright 2016 Frank Vanden berghen
All Right reserved.

JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License". 
If you are interested in distributing, reselling, modifying, contibuting or in general creating 
any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
*/
namespace kibella; require_once __DIR__."/constants.php"; require_once __DIR__."/globals.php"; require_once __DIR__."/functionsaux.php"; function l4m($l3p,$O4m) { if (!is_array($l3p) || count($l3p) == 0) { user_error( "The input parameter is not an array or is empty ($l3p)\n" ,E_USER_ERROR); return NULL; } else if ($O4m<0 || $O4m>=count($l3p)) { error( "The index to extract from the array is out of range ($O4m while size of array is count($l3p))\n" ,E_USER_ERROR); return NULL; } return $l3p[$O4m]; } function l4n($lj,$O4n) { if (array_key_exists($lj,$O4n) && strtolower($O4n[$lj]) === "number") { return "cast($lj as float)"; } else { return $lj; } } function l4o($O4o) { $l4p=strtotime($O4o)-strtotime("00:00"); $O4p=time()-strtotime("00:00"); if ($l4p<=$O4p) { $l4q=strtotime($O4o); } else { $l4q=strtotime($O4o)-0250600; } return $l4q; } function O4q($le) { global $Ot; $lb=array_search($le,$Ot); assert($lb !== FALSE,"The database provider is valid: $lb\n"); return $lb; } function Oe($lb) { if ($lb == NULL) { return NULL; } Od($lb); global $Ot; return $Ot[$lb]; } function l4r($O4r) { $date=date_create(strftime("%Y-%m-%d %H:%M:%S",$O4r)); $l4s=(array) $date; $O4s=timezone_offset_get(new \datetimezone($date->timezone),$date); return $O4r-$O4s; } function l4t($O4t,$timezone="UTC") { $l4u=array("s" => "second","m" => "minute","h" => "hour","d" => "day","w" => "week","M" => "month","y" => "year"); $O4u="/^((now)|([\\d\\/-:\\s]+)\\|\\|)([-+])(\\d+)([smhdwMy]{1})\\w*\\/*([smhdwMy])*/"; preg_match($O4u,$O4t,$l4v); if (count($l4v)>0) { assert(count($l4v)>=7,"The preg_match() array has at least 7 elements"); $date=date_create($l4v[2].$l4v[3]); if ($timezone !== NULL && $l4v[2] !== "now") { $date=date_create(strftime("%Y-%m-%d %H:%M:%S",date_timestamp_get($date)),new \datetimezone($timezone)); } $O4v=$l4v[4].$l4v[5]; $l4w=$l4v[6]; date_modify($date,"$O4v ".$l4u[$l4w]); $l4s=(array) $date; if (count($l4v)>=8) { $O4w=$l4v[7]; l4x($date,$O4w); } } else { if ($timezone !== NULL) { $date=date_create($O4t); $date=date_create(strftime("%Y-%m-%d %H:%M:%S",date_timestamp_get($date)),new \datetimezone($timezone)); } else { $date=date_create($O4t); } } return date_timestamp_get($date); } function l4x(&$O4x,$O4w) { switch ($O4w) { case ("s"): date_modify($O4x,strftime("%Y-%m-%d %H:%M:%S",strtotime($O4x->date))); break; case ("m"): date_modify($O4x,strftime("%Y-%m-%d %H:%M",strtotime($O4x->date)).":00"); break; case ("h"): date_modify($O4x,strftime("%Y-%m-%d %H",strtotime($O4x->date)).":00:00"); break; case ("d"): date_modify($O4x,strftime("%Y-%m-%d",strtotime($O4x->date))." 00:00:00"); break; case ("w"): date_modify($O4x,"last monday"); $l4s=(array) $O4x; date_modify($O4x,strftime("%Y-%m-%d",strtotime($O4x->date))." 00:00:00"); break; case ("M"): date_modify($O4x,"first day of this month"); $l4s=(array) $O4x; date_modify($O4x,strftime("%Y-%m-%d",strtotime($O4x->date))." 00:00:00"); break; case ("y"): date_modify($O4x,strftime("%Y",strtotime($O4x->date))."-01-01 00:00:00"); break; default : break; } $l4s=(array) $O4x; } function l4y($O4y) { $l4z=preg_grep("/^\\-/",array($O4y)); $O4z=count($l4z)>0; if ($O4z) $O4y=substr($O4y,1); $l50=explode("-",$O4y,2); $O50=$l50[0]; if ($O4z) $O50="-".$O50; $l51=""; if (count($l50)>1) { $l51=$l50[1]; } return array($O50,$l51); } function O51($l52) { $l3n=FALSE; $O52=filemtime($l52); if (strtolower(CACHEMODE) === CACHEMODE_DAY) { $O4o=CACHEDAYCHANGE; $l4q=l4o($O4o); if ($O52<$l4q) { $l3n=TRUE; } } else if (time()-$O52>CACHEHOURS*07020) { $l3n=TRUE; } return $l3n; } function l53($le,$O53,$la) { global $l54; return $l54[$O53][$le].$l54[$O53][l1u]."'$la'".$l54[$O53][O1u]; } function lh($le) { global $O54; return $O54[$le] === O18; } function l55($O55,$l56) { switch (( string) $O55) { case (l2n): $O55=O2n; break; case (O2q): if ($l56 == O2p) $O55=O2x; break; case (O30): if ($l56 == l2o) $O55=O2o; else $O55=l2u; break; default : break; } return $O55; } function O56($l3t,$lj,$O4n,$l57,$O57) { if (array_key_exists($lj,$O4n) && $O4n[$lj] === $l57 && l3m($l3t)) { return $l3t.$O57; } else { return $l3t; } } function l58($O58,$l59) { if ($O58 == $l59) $O59=""; else $O59=","; return $O59; } function l5a($l3t,$le,$O5a) { $l5b=""; if ($l3t>0) { switch ($le) { case (O1r): if ($O5a === 1) $l5b= "LIMIT $l3t"; break; case (l1s): if ($O5a === 0) $l5b= "TOP $l3t"; break; case (O1s): if ($O5a === 1) $l5b= "FETCH FIRST $l3t ROWS ONLY"; break; default : break; } } return $l5b; }