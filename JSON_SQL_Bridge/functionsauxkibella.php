<?php
/*
JSON_SQL_Bridge 1.0
Copyright 2016 Frank Vanden berghen
All Right reserved.

JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License". 
If you are interested in distributing, reselling, modifying, contibuting or in general creating 
any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
*/
namespace kibella; require_once "functionsaux.php"; function l47($O38,$O47) { if (!is_array($O38) || count($O38) == 0) { user_error( "The input parameter is not an array or is empty ($O38)\n" ,E_USER_ERROR); return NULL; } else if ($O47<0 || $O47>=count($O38)) { error( "The index to extract from the array is out of range ($O47 while size of array is count($O38))\n" ,E_USER_ERROR); return NULL; } return $O38[$O47]; } function l48($O48,$l49) { if (array_key_exists($O48,$l49) && strtolower($l49[$O48]) === "number") { return "cast($O48 as float)"; } else { return $O48; } } function O49($l4a) { $O4a=strtotime($l4a)-strtotime("00:00"); $l4b=time()-strtotime("00:00"); if ($O4a<=$l4b) { $O4b=strtotime($l4a); } else { $O4b=strtotime($l4a)-0250600; } return $O4b; } function l4c($O4c) { global $l4d; $O4d=array_search($O4c,$l4d); assert($O4d !== FALSE,"The database engine name is valid: $O4d\n"); return $O4d; } function l4e($O4d) { if ($O4d == NULL) { return NULL; } O4e($O4d); global $l4d; return $l4d[$O4d]; } function l4f($O4f) { $date=date_create(strftime("%Y-%m-%d %H:%M:%S",$O4f)); $l4g=(array) $date; $O4g=timezone_offset_get(new \datetimezone($date->timezone),$date); return $O4f-$O4g; } function l4h($O4h,$timezone="UTC") { $l4i=array("s" => "second","m" => "minute","h" => "hour","d" => "day","w" => "week","M" => "month","y" => "year"); $O4i="/^((now)|([\\d\\/-:\\s]+)\\|\\|)([-+])(\\d+)([smhdwMy]{1})\\w*\\/*([smhdwMy])*/"; preg_match($O4i,$O4h,$l4j); if (count($l4j)>0) { assert(count($l4j)>=7,"The preg_match() array has at least 7 elements"); $date=date_create($l4j[2].$l4j[3]); if ($timezone !== NULL && $l4j[2] !== "now") { $date=date_create(strftime("%Y-%m-%d %H:%M:%S",date_timestamp_get($date)),new \datetimezone($timezone)); } $O4j=$l4j[4].$l4j[5]; $l4k=$l4j[6]; date_modify($date,"$O4j ".$l4i[$l4k]); $l4g=(array) $date; if (count($l4j)>=8) { $O4k=$l4j[7]; l4l($date,$O4k); } } else { if ($timezone !== NULL) { $date=date_create($O4h); $date=date_create(strftime("%Y-%m-%d %H:%M:%S",date_timestamp_get($date)),new \datetimezone($timezone)); } else { $date=date_create($O4h); } } return date_timestamp_get($date); } function l4l(&$O4l,$O4k) { switch ($O4k) { case ("s"): date_modify($O4l,strftime("%Y-%m-%d %H:%M:%S",strtotime($O4l->date))); break; case ("m"): date_modify($O4l,strftime("%Y-%m-%d %H:%M",strtotime($O4l->date)).":00"); break; case ("h"): date_modify($O4l,strftime("%Y-%m-%d %H",strtotime($O4l->date)).":00:00"); break; case ("d"): date_modify($O4l,strftime("%Y-%m-%d",strtotime($O4l->date))." 00:00:00"); break; case ("w"): date_modify($O4l,"last monday"); $l4g=(array) $O4l; date_modify($O4l,strftime("%Y-%m-%d",strtotime($O4l->date))." 00:00:00"); break; case ("M"): date_modify($O4l,"first day of this month"); $l4g=(array) $O4l; date_modify($O4l,strftime("%Y-%m-%d",strtotime($O4l->date))." 00:00:00"); break; case ("y"): date_modify($O4l,strftime("%Y",strtotime($O4l->date))."-01-01 00:00:00"); break; default : break; } $l4g=(array) $O4l; } function l4m($O4m) { $l4n=preg_grep("/^\\-/",array($O4m)); $O4n=count($l4n)>0; if ($O4n) $O4m=substr($O4m,1); $l4o=explode("-",$O4m,2); $O4o=$l4o[0]; if ($O4n) $O4o="-".$O4o; $l4p=""; if (count($l4o)>1) { $l4p=$l4o[1]; } return array($O4o,$l4p); } function O4p($Oe) { $O36=FALSE; $l4q=filemtime($Oe); if (strtolower(CACHEMODE) === CACHEMODE_DAY) { $l4a=CACHEDAYCHANGE; $O4b=O49($l4a); if ($l4q<$O4b) { $O36=TRUE; } } else if (time()-$l4q>CACHEHOURS*07020) { $O36=TRUE; } return $O36; } function O4q($lp,$l4r,$l31) { global $O4r; return $O4r[$l4r][$lp].$O4r[$l4r][l1b]."'$l31'".$O4r[$l4r][O1b]; } function l4s($lp) { global $O4s; return $O4s[$lp] === l18; } function l4t($O4t,$l4u) { switch (( string) $O4t) { case (O23): $O4t=l24; break; case (l27): if ($l4u == l26) $O4t=l2e; break; case (l2h): if ($l4u == O24) $O4t=l25; else $O4t=O2a; break; default : break; } return $O4t; } function O4u($O3c,$O48,$l49,$l4v,$O4v) { if (array_key_exists($O48,$l49) && $l49[$O48] === $l4v && O35($O3c)) { return $O3c.$O4v; } else { return $O3c; } } function l4w($O4w,$l4x) { if ($O4w == $l4x) $O4x=""; else $O4x=","; return $O4x; } function l4y($O3c,$lp,$O4y) { $l4z=""; if ($O3c>0) { switch ($lp) { case (l19): if ($O4y === 1) $l4z= "LIMIT $O3c"; break; case (O19): if ($O4y === 0) $l4z= "TOP $O3c"; break; default : break; } } return $l4z; }