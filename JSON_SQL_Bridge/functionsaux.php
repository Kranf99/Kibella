<?php
/*
JSON_SQL_Bridge
Copyright 2016 Frank Vanden berghen
All Right reserved.

JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License". 
If you are interested in distributing, reselling, modifying, contibuting or in general creating 
any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
*/
function l3m($O3m) { $l3n=FALSE; $O3m=trim($O3m); if (strlen($O3m)>0) { $O3m=preg_replace("/^(\\-|\\+)\\s*/","\$1",$O3m); if (!preg_match("/[^0123456789\\.\\-\\+]/",$O3m)) { if (preg_match("/^.+(\\-|\\+)+/",$O3m)) $l3n=FALSE; else if (preg_match("/^(\\-\\.)|(\\+\\.)/",$O3m) && preg_match("/\\.|\\-|\\+/",substr($O3m,2))) $l3n=FALSE; else if (preg_match_all("/\\./",$O3m)>1) $l3n=FALSE; else $l3n=TRUE; } } return $l3n; } function O3n($O3m,$l3o=NULL) { if ($l3o === NULL) { echo $O3m; } else { assert($l3o !== FALSE,"The file handle is not false"); fputs($l3o,$O3m); } } function O3o($l3p,$O3p,$l3q=array(),$O3q=0,&$l3r=0) { if (!is_array($l3p)) { user_error( __FUNCTION__.": The first argument should be an array",E_USER_ERROR); return; } if (!is_callable($O3p)) { if (is_array($O3p)) { $O3p=$O3p[0]."::".$O3p[1]; } user_error( __FUNCTION__.": The second argument is not a valid callback ".$O3p,E_USER_ERROR); return; } if (!is_null($l3q) && !is_array($l3q)) { user_error( __FUNCTION__.": The third argument should be an array",E_USER_ERROR); return; } $O3r=count($l3p); if (is_null($l3q)) { $l3q=array(); } $l3s=array(); $l3s[]=NULL; $l3s[]=NULL; $l3s[]=$O3q; $l3s[]=&$l3r; $l3s[]=$O3r; $l3s[]=$l3q; $l3o=NULL; if ($O3r>0) { $O3q=-1; foreach ($l3p as $O3s => $l3t) { $O3q ++; $l3s[0]=$l3t; $l3s[1]=$O3s; $l3s[2]=$O3q; if (is_array($l3t)) { call_user_func_array($O3p,$l3s); $l3r ++; $l3o=O3o($l3t,$O3p,$l3q,$O3q,$l3r); } else { $l3o=call_user_func_array($O3p,$l3s); } } $l3r --; } else { $l3o=call_user_func_array($O3p,$l3s); $l3r --; } return $l3o; } function O3t($l3p) { $l3u=array(); $O3u=array_keys($l3p); sort($O3u); foreach ($O3u as $O3s) { $l3u[$O3s]=$l3p[$O3s]; } return $l3u; } function l3v($l3p,$O3v=FALSE) { return O3o($l3p,"updateDimension",array("max_number_elements" => $O3v)); } function l3w($O3w,$l3x,$O3x="string",$l3y=TRUE,$O3y=.1E-5) { if (is_null($O3w) && is_null($l3x) || $O3w === FALSE && $l3x === FALSE) { return TRUE; } if (strtolower($O3x) === "string") { if (strtolower($O3w) !== strtolower($l3x)) { return FALSE; } if ($l3y === TRUE && $O3w !== $l3x) { return FALSE; } else return TRUE; } else { if (!l3m($O3w) || !l3m($l3x)) { echo "WARNING: Not all the compared values are numbers.\n"; return FALSE; } if (( float) $O3w === .00 && ( float) $l3x === .00) { return TRUE; } if (abs($O3w-$l3x)/max(abs($O3w),abs($l3x))<( float) $O3y) { return TRUE; } else { return FALSE; } } } function l3z($O3z,$l40,$O40=TRUE,$l41=TRUE,$O41=array("value"),$O3y=.1E-5,$l42="bool") { if (count($O3z) != count($l40)) { return FALSE; } if (is_array($O3z) && !is_array($l40) || !is_array($O3z) && is_array($l40)) { return FALSE; } if (!is_array($O3z) && !is_array($l40)) { return $O3z === $l40; } if ($O40 === FALSE) { $l40=array_change_key_case($l40,CASE_LOWER); if (count($l40)<count($O3z)) { return FALSE; } } foreach ($O3z as $O42 => $O3w) { if ($O40 === FALSE) { $O42=strtolower($O42); $O41=array_map("strtolower",$O41); } if (array_key_exists($O42,$l40)) { $l3x=$l40[$O42]; if (is_array($O3w)) { $l43=l3z($O3w,$l3x,$O40=$O40,$l41=$l41,$O41=$O41,$O3y=$O3y,$l42=$l42); if ($l43 !== TRUE) { if (strtolower($l42) === "bool") { return FALSE; } else { return $O42." -> ".$l43; } } } else { if (in_array($O42,$O41)) { $O43="number"; } else { $O43="string"; } if (l3w($O3w,$l3x,$O3x=$O43,$l41=$l41,$O3y=$O3y) === FALSE) { if (strtolower($l42) === "bool") { return FALSE; } else { return $O42; } } } } else { if (strtolower($l42) === "bool") { return FALSE; } else { return $O42; } } } return TRUE; } function l44($l3t,$O3s,$O3q,$l3r,$O3r,$O44) { static $l45; static $O45; static $l46; static $O46; if ($O3q == 0 && $l3r == 0) { $l45=1; $O45=array(array("count" => 0)); $l46=0; $O46=FALSE; if (array_key_exists("max_number_elements",$O44)) $O46=$O44["max_number_elements"]; } if ($O3r>0) { $O45[$l3r]["count"]++; } if (is_array($l3t)) { $O45[]=array("count" => 0); } else { if ($O45[$l3r]["count"] == $O3r) { if ($l3r+1>=$l45) { $l46=max($l46,$O45[$l3r]["count"]); } $l45=max($l45,$l3r+1); array_pop($O45); } } if ($O46 === FALSE) { return max($l45,$l3r+1); } else { return array(max($l45,$l3r+1),$l46); } } function checkdirexistsorcreate($l47,$O47=0744,$l48=TRUE,$O48=FALSE,$l49="") { $lg=TRUE; if (!is_dir($l47)) { if ($O48) user_error($l49,E_USER_WARNING); $lg=mkdir($l47,$O47,$l48); } return $lg; } function O49($l4a) { if (strlen($l4a)>0) { $l4a=preg_replace("/\\s*,\\s*/",",",$l4a); $Oh=explode(",",strtolower($l4a)); for ($O4a=0; $O4a<count($Oh); $O4a ++) { $Oh[$O4a]=preg_replace("/(^\"(.*)\"\$)|(^\\'(.*)\\'\$)/","\$2\$4",$Oh[$O4a]); } } else { $Oh=array(); } return $Oh; } function deletedir($l47,$l4b=FALSE,$O4b=0) { if (!is_dir($l47)) { echo "<pre>ERROR: $l47 must be a directory\nThe deletion process failed.\n</pre>"; return FALSE; } if (substr($l47,strlen($l47)-1,1) != "/") { $l47.="/"; } $l4c=glob($l47."*",GLOB_MARK); foreach ($l4c as $O4c) { if (is_dir($O4c)) { deletedir($O4c); } else { if ($O4b == 0 || $O4b<0 && (time()-filemtime($O4c))>abs($O4b) || $O4b>0 && filemtime($O4c)<$O4b) { unlink($O4c); } } } if (!$l4b) rmdir($l47); return TRUE; } function l4d($O3m,$O4d=FALSE) { if ($O4d) { $l4e="["; $O4e="]"; } else { $l4e=""; $O4e=""; } return "\"".$l4e.str_replace("\"","\\\"",$O3m).$O4e."\""; } function l4f($O4f) { $O4f=str_replace("'","''",$O4f); return $O4f; } function l4g($O4f) { $O4f=str_replace("\"","'",$O4f); return $O4f; } function Oy($lq,$l3p) { if (!is_array($l3p)) { user_error( "Input parameter $l3p is not an array\n" ,E_USER_ERROR); return; } foreach ($l3p as $O4g) { $l4h=explode($lq,$O4g); $O4h=count($l4h); if ($O4h == 1) $l4i[trim($l4h[0])]=NULL; else if ($O4h>1) $l4i[trim($l4h[0])]=trim($l4h[1]); } return $l4i; } function O4i($l47,$l4j) { $O4j=""; $l4k=strrpos($l47,$l4j); if ($l4k>0) { $O4k=substr($l47,0,$l4k-1); $l4l=substr($l47,$l4k-1,1); $O4j=substr($O4k,strrpos($O4k,$l4l)+1); } return $O4j; } function O4l($O3m) { return preg_replace("/^_{1}|_{1}\$/","",$O3m); }