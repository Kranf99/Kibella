<?php use O33\l34\O34\iterator\l35;
/*
JSON_SQL_Bridge 1.0
Copyright 2016 Frank Vanden berghen
All Right reserved.

JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License". 
If you are interested in distributing, reselling, modifying, contibuting or in general creating 
any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
*/
function O35($l36) { $O36=FALSE; $l36=trim($l36); if (strlen($l36)>0) { $l36=preg_replace("/^(\\-|\\+)\\s*/","\$1",$l36); if (!preg_match("/[^0123456789\\.\\-\\+]/",$l36)) { if (preg_match("/^.+(\\-|\\+)+/",$l36)) $O36=FALSE; else if (preg_match("/^(\\-\\.)|(\\+\\.)/",$l36) && preg_match("/\\.|\\-|\\+/",substr($l36,2))) $O36=FALSE; else if (preg_match_all("/\\./",$l36)>1) $O36=FALSE; else $O36=TRUE; } } return $O36; } function l37($l36,$O37=NULL) { if ($O37 === NULL) { echo $l36; } else { assert($O37 !== FALSE,"The file handle is not false"); fputs($O37,$l36); } } function l38($O38,$l39,$O39=array(),$l3a=0,&$O3a=0) { if (!is_array($O38)) { user_error( __FUNCTION__.": The first argument should be an array",E_USER_ERROR); return; } if (!is_callable($l39)) { if (is_array($l39)) { $l39=$l39[0]."::".$l39[1]; } user_error( __FUNCTION__.": The second argument is not a valid callback ".$l39,E_USER_ERROR); return; } if (!is_null($O39) && !is_array($O39)) { user_error( __FUNCTION__.": The third argument should be an array",E_USER_ERROR); return; } $l3b=count($O38); if (is_null($O39)) { $O39=array(); } $O3b=array(); $O3b[]=NULL; $O3b[]=NULL; $O3b[]=$l3a; $O3b[]=&$O3a; $O3b[]=$l3b; $O3b[]=$O39; $O37=NULL; if ($l3b>0) { $l3a=-1; foreach ($O38 as $l3c => $O3c) { $l3a ++; $O3b[0]=$O3c; $O3b[1]=$l3c; $O3b[2]=$l3a; if (is_array($O3c)) { call_user_func_array($l39,$O3b); $O3a ++; $O37=l38($O3c,$l39,$O39,$l3a,$O3a); } else { $O37=call_user_func_array($l39,$O3b); } } $O3a --; } else { $O37=call_user_func_array($l39,$O3b); $O3a --; } return $O37; } function l3d($O38) { $O3d=array(); $l3e=array_keys($O38); sort($l3e); foreach ($l3e as $l3c) { $O3d[$l3c]=$O38[$l3c]; } return $O3d; } function O3e($O38,$l3f=FALSE) { return l38($O38,"updateDimension",array("max_number_elements" => $l3f)); } function O3f($l3g,$O3g,$l3h="string",$O3h=TRUE,$l3i=.1E-5) { if (is_null($l3g) && is_null($O3g) || $l3g === FALSE && $O3g === FALSE) { return TRUE; } if (strtolower($l3h) === "string") { if (strtolower($l3g) !== strtolower($O3g)) { return FALSE; } if ($O3h === TRUE && $l3g !== $O3g) { return FALSE; } else return TRUE; } else { if (!O35($l3g) || !O35($O3g)) { echo "WARNING: Not all the compared values are numbers.\n"; return FALSE; } if (( float) $l3g === .00 && ( float) $O3g === .00) { return TRUE; } if (abs($l3g-$O3g)/max(abs($l3g),abs($O3g))<( float) $l3i) { return TRUE; } else { return FALSE; } } } function O3i($l3j,$O3j,$l3k=TRUE,$O3k=TRUE,$l3l=array("value"),$l3i=.1E-5,$O3l="bool") { if (count($l3j) != count($O3j)) { return FALSE; } if (is_array($l3j) && !is_array($O3j) || !is_array($l3j) && is_array($O3j)) { return FALSE; } if (!is_array($l3j) && !is_array($O3j)) { return $l3j === $O3j; } if ($l3k === FALSE) { $O3j=array_change_key_case($O3j,CASE_LOWER); if (count($O3j)<count($l3j)) { return FALSE; } } foreach ($l3j as $l3m => $l3g) { if ($l3k === FALSE) { $l3m=strtolower($l3m); $l3l=array_map("strtolower",$l3l); } if (array_key_exists($l3m,$O3j)) { $O3g=$O3j[$l3m]; if (is_array($l3g)) { $O3m=O3i($l3g,$O3g,$l3k=$l3k,$O3k=$O3k,$l3l=$l3l,$l3i=$l3i,$O3l=$O3l); if ($O3m !== TRUE) { if (strtolower($O3l) === "bool") { return FALSE; } else { return $l3m." -> ".$O3m; } } } else { if (in_array($l3m,$l3l)) { $l3n="number"; } else { $l3n="string"; } if (O3f($l3g,$O3g,$l3h=$l3n,$O3k=$O3k,$l3i=$l3i) === FALSE) { if (strtolower($O3l) === "bool") { return FALSE; } else { return $l3m; } } } } else { if (strtolower($O3l) === "bool") { return FALSE; } else { return $l3m; } } } return TRUE; } function O3n($O3c,$l3c,$l3a,$O3a,$l3b,$l3o) { static $O3o; static $l3p; static $O3p; static $l3q; if ($l3a == 0 && $O3a == 0) { $O3o=1; $l3p=array(array("count" => 0)); $O3p=0; $l3q=FALSE; if (array_key_exists("max_number_elements",$l3o)) $l3q=$l3o["max_number_elements"]; } if ($l3b>0) { $l3p[$O3a]["count"]++; } if (is_array($O3c)) { $l3p[]=array("count" => 0); } else { if ($l3p[$O3a]["count"] == $l3b) { if ($O3a+1>=$O3o) { $O3p=max($O3p,$l3p[$O3a]["count"]); } $O3o=max($O3o,$O3a+1); array_pop($l3p); } } if ($l3q === FALSE) { return max($O3o,$O3a+1); } else { return array(max($O3o,$O3a+1),$O3p); } } function checkdirexistsorcreate($O3q,$l3r=0744,$O3r=TRUE,$l3s=FALSE,$O3s="") { $l3t=TRUE; if (!is_dir($O3q)) { if ($l3s) showmessage("",O16,$O3s); $l3t=mkdir($O3q,$l3r,$O3r); } return $l3t; } function O3t($l3u) { if (strlen($l3u)>0) { $l3u=preg_replace("/\\s*,\\s*/",",",$l3u); $O3u=explode(",",strtolower($l3u)); for ($l3v=0; $l3v<count($O3u); $l3v ++) { $O3u[$l3v]=preg_replace("/(^\"(.*)\"\$)|(^\\'(.*)\\'\$)/","\$2\$4",$O3u[$l3v]); } } else { $O3u=array(); } return $O3u; } function deletedir($O3q,$O3v=FALSE,$l3w=0) { if (!is_dir($O3q)) { echo "<pre>ERROR: $O3q must be a directory\nThe deletion process failed.\n</pre>"; return FALSE; } if (substr($O3q,strlen($O3q)-1,1) != "/") { $O3q.="/"; } $O3w=glob($O3q."*",GLOB_MARK); foreach ($O3w as $l3x) { if (is_dir($l3x)) { deletedir($l3x); } else { if ($l3w == 0 || $l3w<0 && (time()-filemtime($l3x))>abs($l3w) || $l3w>0 && filemtime($l3x)<$l3w) { unlink($l3x); } } } if (!$O3v) rmdir($O3q); return TRUE; } function O3x($l36,$l3y=FALSE) { if ($l3y) { $O3y="["; $l3z="]"; } else { $O3y=""; $l3z=""; } return "\"".$O3y.str_replace("\"","\\\"",$l36).$l3z."\""; } function O3z($l40) { $l40=str_replace("'","''",$l40); return $l40; } function O40($l40) { $l40=str_replace("\"","'",$l40); return $l40; } function l41($Ob,$O38) { if (!is_array($O38)) { user_error( "Input parameter $O38 is not an array\n" ,E_USER_ERROR); return; } foreach ($O38 as $O41) { $l42=explode($Ob,$O41); $O42=count($l42); if ($O42 == 1) $l43[$l42[0]]=NULL; else if ($O42>1) $l43[$l42[0]]=$l42[1]; } return $l43; } function O43($O3q,$l44) { $O44=""; $l45=strrpos($O3q,$l44); if ($l45>0) { $O45=substr($O3q,0,$l45-1); $l46=substr($O3q,$l45-1,1); $O44=substr($O45,strrpos($O45,$l46)+1); } return $O44; } function O46($l36) { return preg_replace("/^_{1}|_{1}\$/","",$l36); }