<?php use l33\O33\l34\iterator\O34;
/*
JSON_SQL_Bridge 1.0
Copyright 2016 Frank Vanden berghen
All Right reserved.

JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License". 
If you are interested in distributing, reselling, modifying, contibuting or in general creating 
any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
*/
function l35($O35) { $l36=FALSE; $O35=trim($O35); if (strlen($O35)>0) { $O35=preg_replace("/^(\\-|\\+)\\s*/","\$1",$O35); if (!preg_match("/[^0123456789\\.\\-\\+]/",$O35)) { if (preg_match("/^.+(\\-|\\+)+/",$O35)) $l36=FALSE; else if (preg_match("/^(\\-\\.)|(\\+\\.)/",$O35) && preg_match("/\\.|\\-|\\+/",substr($O35,2))) $l36=FALSE; else if (preg_match_all("/\\./",$O35)>1) $l36=FALSE; else $l36=TRUE; } } return $l36; } function O36($O35,$l37=NULL) { if ($l37 === NULL) { echo $O35; } else { assert($l37 !== FALSE,"The file handle is not false"); fputs($l37,$O35); } } function O37($l38,$O38,$l39=array(),$O39=0,&$l3a=0) { if (!is_array($l38)) { user_error( __FUNCTION__.": The first argument should be an array",E_USER_ERROR); return; } if (!is_callable($O38)) { if (is_array($O38)) { $O38=$O38[0]."::".$O38[1]; } user_error( __FUNCTION__.": The second argument is not a valid callback ".$O38,E_USER_ERROR); return; } if (!is_null($l39) && !is_array($l39)) { user_error( __FUNCTION__.": The third argument should be an array",E_USER_ERROR); return; } $O3a=count($l38); if (is_null($l39)) { $l39=array(); } $l3b=array(); $l3b[]=NULL; $l3b[]=NULL; $l3b[]=$O39; $l3b[]=&$l3a; $l3b[]=$O3a; $l3b[]=$l39; $l37=NULL; if ($O3a>0) { $O39=-1; foreach ($l38 as $O3b => $l3c) { $O39 ++; $l3b[0]=$l3c; $l3b[1]=$O3b; $l3b[2]=$O39; if (is_array($l3c)) { call_user_func_array($O38,$l3b); $l3a ++; $l37=O37($l3c,$O38,$l39,$O39,$l3a); } else { $l37=call_user_func_array($O38,$l3b); } } $l3a --; } else { $l37=call_user_func_array($O38,$l3b); $l3a --; } return $l37; } function O3c($l38) { $l3d=array(); $O3d=array_keys($l38); sort($O3d); foreach ($O3d as $O3b) { $l3d[$O3b]=$l38[$O3b]; } return $l3d; } function l3e($l38,$O3e=FALSE) { return O37($l38,"updateDimension",array("max_number_elements" => $O3e)); } function l3f($O3f,$l3g,$O3g="string",$l3h=TRUE,$O3h=.1E-5) { if (is_null($O3f) && is_null($l3g) || $O3f === FALSE && $l3g === FALSE) { return TRUE; } if (strtolower($O3g) === "string") { if (strtolower($O3f) !== strtolower($l3g)) { return FALSE; } if ($l3h === TRUE && $O3f !== $l3g) { return FALSE; } else return TRUE; } else { if (!l35($O3f) || !l35($l3g)) { echo "WARNING: Not all the compared values are numbers.\n"; return FALSE; } if (( float) $O3f === .00 && ( float) $l3g === .00) { return TRUE; } if (abs($O3f-$l3g)/max(abs($O3f),abs($l3g))<( float) $O3h) { return TRUE; } else { return FALSE; } } } function l3i($O3i,$l3j,$O3j=TRUE,$l3k=TRUE,$O3k=array("value"),$O3h=.1E-5,$l3l="bool") { if (count($O3i) != count($l3j)) { return FALSE; } if (is_array($O3i) && !is_array($l3j) || !is_array($O3i) && is_array($l3j)) { return FALSE; } if (!is_array($O3i) && !is_array($l3j)) { return $O3i === $l3j; } if ($O3j === FALSE) { $l3j=array_change_key_case($l3j,CASE_LOWER); if (count($l3j)<count($O3i)) { return FALSE; } } foreach ($O3i as $O3l => $O3f) { if ($O3j === FALSE) { $O3l=strtolower($O3l); } if (array_key_exists($O3l,$l3j)) { $l3g=$l3j[$O3l]; if (is_array($O3f)) { $l3m=l3i($O3f,$l3g,$O3j=$O3j,$l3k=$l3k,$O3k=$O3k,$O3h=$O3h,$l3l=$l3l); if ($l3m !== TRUE) { if (strtolower($l3l) === "bool") { return FALSE; } else { return $O3l." -> ".$l3m; } } } else { if (in_array($O3l,$O3k)) { $O3m="number"; } else { $O3m="string"; } if (l3f($O3f,$l3g,$O3g=$O3m,$l3k=$l3k,$O3h=$O3h) === FALSE) { if (strtolower($l3l) === "bool") { return FALSE; } else { return $O3l; } } } } else { if (strtolower($l3l) === "bool") { return FALSE; } else { return $O3l; } } } return TRUE; } function l3n($l3c,$O3b,$O39,$l3a,$O3a,$O3n) { static $l3o; static $O3o; static $l3p; static $O3p; if ($O39 == 0 && $l3a == 0) { $l3o=1; $O3o=array(array("count" => 0)); $l3p=0; $O3p=FALSE; if (array_key_exists("max_number_elements",$O3n)) $O3p=$O3n["max_number_elements"]; } if ($O3a>0) { $O3o[$l3a]["count"]++; } if (is_array($l3c)) { $O3o[]=array("count" => 0); } else { if ($O3o[$l3a]["count"] == $O3a) { if ($l3a+1>=$l3o) { $l3p=max($l3p,$O3o[$l3a]["count"]); } $l3o=max($l3o,$l3a+1); array_pop($O3o); } } if ($O3p === FALSE) { return max($l3o,$l3a+1); } else { return array(max($l3o,$l3a+1),$l3p); } } function checkdirexistsorcreate($l3q,$O3q=0744,$l3r=TRUE,$O3r=FALSE,$l3s="") { $O3s=TRUE; if (!is_dir($l3q)) { if ($O3r) showmessage("",l16,$l3s); $O3s=mkdir($l3q,$O3q,$l3r); } return $O3s; } function l3t($O3t) { if (strlen($O3t)>0) { $O3t=preg_replace("/\\s*,\\s*/",",",$O3t); $l3u=explode(",",strtolower($O3t)); for ($O3u=0; $O3u<count($l3u); $O3u ++) { $l3u[$O3u]=preg_replace("/(^\"(.*)\"\$)|(^\\'(.*)\\'\$)/","\$2\$4",$l3u[$O3u]); } } else { $l3u=array(); } return $l3u; } function deletedir($l3q,$l3v=FALSE,$O3v=0) { if (!is_dir($l3q)) { echo "<pre>ERROR: $l3q must be a directory\nThe deletion process failed.\n</pre>"; return FALSE; } if (substr($l3q,strlen($l3q)-1,1) != "/") { $l3q.="/"; } $l3w=glob($l3q."*",GLOB_MARK); foreach ($l3w as $O3w) { if (is_dir($O3w)) { deletedir($O3w); } else { if ($O3v == 0 || $O3v<0 && (time()-filemtime($O3w))>abs($O3v) || $O3v>0 && filemtime($O3w)<$O3v) { unlink($O3w); } } } if (!$l3v) rmdir($l3q); return TRUE; } function l3x($O35,$O3x=FALSE) { if ($O3x) { $l3y="["; $O3y="]"; } else { $l3y=""; $O3y=""; } return "\"".$l3y.str_replace("\"","\\\"",$O35).$O3y."\""; } function l3z($O3z) { $O3z=str_replace("'","''",$O3z); return $O3z; } function l40($O3z) { $O3z=str_replace("\"","'",$O3z); return $O3z; } function O40($Ob,$l38) { if (!is_array($l38)) { user_error( "Input parameter $l38 is not an array\n" ,E_USER_ERROR); return; } foreach ($l38 as $l41) { $O41=explode($Ob,$l41); $l42=count($O41); if ($l42 == 1) $O42[$O41[0]]=NULL; else if ($l42>1) $O42[$O41[0]]=$O41[1]; } return $O42; } function l43($l3q,$O43) { $l44=""; $O44=strrpos($l3q,$O43); if ($O44>0) { $l45=substr($l3q,0,$O44-1); $O45=substr($l3q,$O44-1,1); $l44=substr($l45,strrpos($l45,$O45)+1); } return $l44; } function l46($O35) { return preg_replace("/^_{1}|_{1}\$/","",$O35); }