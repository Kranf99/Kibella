<?php
/*
JSON_SQL_Bridge 1.0
Copyright 2016 Frank Vanden berghen
All Right reserved.

JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License".
If you are interested in distributing, reselling, modifying, contibuting or in general creating
any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
*/
namespace kibella; use l33\O33\O8b\l8c; function O8c($l7n,$O30,$l30) { $l38=json_decode($l7n,TRUE); $l31=O31($O30,$l30); $O6u=l7c($l31); $l67=O37($l38,"kibella\\parseEsJsonQueryElement",array("fieldtypes" => $O6u)); return $l67; } function parseesjsonqueryelement($l3c,$O4r,$O39,$l3a,$O3a,$l39) { static $l8d; static $O8d; static $l8e; static $O8e; static $l8f; static $O8f; static $l8g; static $O8g; static $l8h; static $O8h; static $l8i; static $O8i; static $l8j; static $O8j; static $l8k; static $O8k; static $l8l; static $O8l; static $l8m; static $O8m; static $l8n; static $O8n; static $l8o; static $O8o; static $l8p; static $O8p; static $l8q; static $O8q; static $l8r; static $O8r; static $l8s; static $O8s; static $l8t; static $O8t; static $l8u; static $O8u; static $l8v; static $O8v; static $l8w; static $O8w; static $l8x; global $O8x; global $l8y; if ($O39 == 0 && $l3a == 0) { $l8d=array(); $O8d=array(); $l8e=array(); $O8e=array("level" => 0,"context" => array(O2h),"idx" => array(-1),"size" => array($O3a)); $O8f=array(); $l8g=FALSE; $O8g=FALSE; $l8h=FALSE; $O8h=-1; $l8i=NULL; $O8i=NULL; $l8j=NULL; $O8j=NULL; $l8k=NULL; $O8k=NULL; $l8l=DISCOVERSIZE; $O8l=NULL; $l8m=NULL; $O8m=NULL; $O8n=NULL; $l8n=NULL; $l8o=NULL; $O8o=NULL; $l8p=NULL; $O8p=l1z; $l8q=""; $O8q=NULL; $l8r=NULL; $O8r=NULL; $l8s=""; $O8s=""; $l8t=NULL; $O8t=""; $l8u=NULL; $O8u=NULL; $l8v=NULL; $O8v=NULL; $l8w=NULL; $O8w=NULL; $l8x=""; if (array_key_exists("fieldtypes",$l39)) $l8d=$l39["fieldtypes"]; } if ($l3a>$O8e["level"]) { return $l8f; } $O8e["idx"][$O8e["level"]]++; if (is_array($l3c) && count($l3c)>0) { $O8e["level"]++; $l4s=$O8e["context"][$O8e["level"]-1]; $O4r=l4r($O4r,$l4s); if (array_search(NULL,$O8x[$l4s]) !== FALSE || array_search(( string) $O4r,$O8x[$l4s]) !== FALSE || $l4s == l24 && array_search(( string) $O4r,$O8x[l24][0]) !== FALSE) { if ($O4r === O23) { $O8h ++; } else if ($O4r === l2c) { $l8g=TRUE; } switch ($l4s) { case (O23): $O8o=$O4r; $O8e["context"][]=l24; $O8u="(CASE"; break; case (l24): if ($O3b=array_search($O4r,$O8x[l24][0]) !== FALSE) { $l8w=$l8y[$O4r]; $O8e["context"][]=l2j; } else if ($O3b=array_search($O4r,array_slice($O8x[l24],1)) !== FALSE) { $O8e["context"][]=$O4r; } else O84($O4r,$l4s,$O8x,"COMPOUND",2); break; case (O25): if ($O4r === O2d) $l8q=""; else if ($O4r === l2e) $l8q=" not "; $O8e["context"][]=$O4r; break; case (l29): if (strpos($O4r,"(CASE WHEN ") === 0) { $l8n=$O4r; } else { $l8n=l3x($O4r); } $O8e["context"][]=O29; break; case (l2a): $O8n=l3x($O4r); $O8e["context"][]=O2a; break; case (l27): $O8y=l3x($O4r); $l8z=l46($O4r); $l8m=l3x($l8z."_".l2o); $O8m=l3x($l8z."_".O2n); $O8e["context"][]=l28; break; case (l28): switch (( string) $O4r) { case (O27): case (O28): $O8e["context"][]=$O4r; break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; default : if (gettype($O4r) == "integer") { $O8z=end($O8e["size"]); reset($O8e["size"]); if ($O8z>1) { $O39=$O4r; if ($O39 == $O8z-1) { $O8s=")"; } if ($O39 == 0) { $l8s="("; } else { $O8p=" and "; $l8s=""; if ($O39<$O8z-1) $O8s=""; } } $O8e["context"][]=$l4s; } else $O8e["context"][]=$O4r; break; } } else { O84($O4r,$l4s,$O8x,"COMPOUND",1); $O8e["context"][]=$l4s; } if (DEBUG) { echo "CONTEXT history\n"; print_r($O8e["context"]); } $O8e["idx"][]=-1; $O8e["size"][]=count($l3c); $l4s=$O8e["context"][$O8e["level"]]; if (DEBUG) echo "Keyword: $O4r => Entering context ".$l4s."... (field aggregation level is $O8h)\n"; } else { $l3a=$O8e["level"]; $l47=$O8e["idx"][$l3a]; $O8z=$O8e["size"][$l3a]; $l4s=$O8e["context"][$l3a]; $O4r=l4r($O4r,$l4s); switch ($l4s) { case (O2c): case (l2d): $O8d[$O8h]["ofield"]=$O8o; if ($l4s == O2c) $O8d[$O8h]["type"]="h"; else $O8d[$O8h]["type"]="hd"; $O8d[$O8h]["order"]=l3x($O8o); $O8d[$O8h]["limit"]=0; switch (( string) $O4r) { case (O2l): $l8o=l3x($l3c); $O8d[$O8h]["ifieldname"]=$l8o; $O8d[$O8h]["ifield"]=$l8o; break; case (O2p): $O8d[$O8h]["interval"]=$l3c; break; case (O2r): break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; case (O2b): $O8d[$O8h]["ofield"]=$O8o; $O8d[$O8h]["type"]="g"; $O8d[$O8h]["order"]=l3x($O8o); $O8d[$O8h]["limit"]=0; switch (( string) $O4r) { case (O2l): $l8o=$l3c; $O8d[$O8h]["ifieldname"]=l3x(l46($l8o)); break; case (O2s): $O8d[$O8h]["ifield"]=l3x(l46($l8o)."_geohash".$l3c); break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; case (O27): switch (( string) $O4r) { case (O2n): $O8j=$l3c; break; case (l2o): $l8i=$l3c; break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; case (O28): switch (( string) $O4r) { case (O2n): $l8j=$l3c; break; case (l2o): $O8i=$l3c; break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; case (O29): switch (( string) $O4r) { case (l2s): $O8p=$l3c; break; case (l2t): $O8w=l40($l3c); break; case (l2v): if ($l3c === "phrase") $O8t="'"; else $O8t=""; break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; case (l2f): if ($O4r === l2k) { $O8r=$l8y[l21]."(*)"." ".$l3c; } else { $O8r=l3x($O4r)." ".$l3c; } assert(!is_null($O8d[$O8h]["ifield"]),"The aggregation field name is NOT null"); $O8d[$O8h]["order"]=$O8r.", ".$O8d[$O8h]["ifield"]; break; case (l2g): switch (( string) $O4r) { case (O2j): break; case (l2t): if ($l3c === "*") $l8t="1 = 1"; else $l8t=$l3c; $O8f[]=trim($l8t); break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; case (O24): case (l25): $O8d[$O8h]["ofield"]=$O8o; if ($l4s == O24) { $O8d[$O8h]["type"]="r"; } else { $O8d[$O8h]["type"]="rd"; } $O8d[$O8h]["order"]=l3x($O8o); $O8d[$O8h]["limit"]=0; switch (( string) $O4r) { case (O2l): $l8o=l3x($l3c); $O8d[$O8h]["ifieldname"]=$l8o; break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; case (O2a): switch (( string) $O4r) { case (O2m): $l8p=$l3c; break; case (O2o): case (l2p): $O8k=$l3c; if ($O4r === O2q) $O8q=">"; else $O8q=">="; break; case (O2q): case (l2r): $l8k=$l3c; if ($O4r === O2q) $l8r="<"; else $l8r="<="; break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; case (l2h): switch (( string) $O4r) { case (l2n): if ($O8d[$O8h]["type"] == "rd") { $l3c=l4f($l3c); } $l8u=$l3c; $l8v=$l3c."-"; break; case (O2u): if ($O8d[$O8h]["type"] == "rd") { $l3c=l4f($l3c); } $O8v=$l3c; $l8v.=$l3c; $O8u.=O1c."WHEN ".$l8u." <= ".$l8o." AND ".$l8o." < ".$O8v." THEN "."'".$l8v."'"; $O8d[$O8h]["ranges"][]=$l8v; break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; case (O2h): if ($O4r === l2u) { $l8l=$l3c; } else O84($O4r,$l4s,$O8x,"LEAF"); break; case (l2j): switch (( string) $O4r) { case (O2l): $O8l=l3x($l3c); break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; case (O2i): $O8d[$O8h]["ofield"]=$O8o; $O8d[$O8h]["type"]="t"; switch (( string) $O4r) { case (O2l): $l8o=l3x($l3c); $O8d[$O8h]["ifieldname"]=$l8o; $O8d[$O8h]["ifield"]=$l8o; break; case (l2u): $l8l=$l3c; $O8d[$O8h]["limit"]=$l8l; break; default : O84($O4r,$l4s,$O8x,"LEAF"); break; } break; default : l87($l4s,"LEAF"); break; } while ($l47 == $O8z-1 && $l3a>=0) { if (DEBUG) echo "\tRemoving data from level: ".$l3a."\n"; $l3a --; $O8e["level"]=$l3a; foreach (array_slice($O8e,1) as $l90 => $O90) { array_pop($O8e[$l90]); } assert($l3a>=-1,"\$level >= -1"); if ($l3a>=0) { switch ($l4s) { case (l24): $O8l=NULL; $O8o=NULL; $l8w=NULL; break; case (O24): case (l25): assert(!is_null($O8u) && !is_null($O8o),"C_AGGS_RANGE: Range grouping ($O8u), FieldOut ($O8o) are not null"); $O8u.="\nEND)"; $O8d[$O8h]["ifield"]=$O8u; break; case (O27): case (O28): case (O29): case (O2a): case (l2g): if ($l4s == O27 && !is_null($l8m) && !is_null($O8m) && !is_null($l8i) && !is_null($O8j)) { if (!$l8h) { $l91="("; $O91=""; } else { $l91=""; $O91=")"; } $l8t=$l91.$O8j." <= ".$O8m." and ".$l8m." <= ".$l8i.$O91; $O8g=TRUE; } else if ($l4s == O28 && !is_null($l8m) && !is_null($O8m) && !is_null($O8i) && !is_null($l8j)) { if (!$O8g) { $l91="("; $O91=""; } else { $l91=""; $O91=")"; } $l8t=$l91.$O8i." <= ".$l8m." and ".$O8m." <= ".$l8j.$O91; $l8h=TRUE; } else if ($l4s == O29 && !is_null($l8n) && !is_null($O8w)) { $l8t=$l8n." = ".$O8t.l3z($O8w).$O8t; } else if ($l4s == O2a && !is_null($O8k) && !is_null($l8k)) { if (array_key_exists($O8n,$l8d) && $l8d[$O8n] === "date") { $O8n=$O8n."*1000"; } $l8t= "$O8n $O8q $O8k and $O8n $l8r $l8k"; } $l92=$l8s.$l8q; if ($l8x == "") $l8x="WHERE"; else { if (($O8g+$l8h)<2) $l92=$O8p.$l8s.$l8q; else $l92=$O8p.$l8s; } if (!is_null($l8t)) { $l8x.="\n".$l92."(".$l8t.")".$O8s; } $O8f[]=trim($l8q.$l8t); $l8s=""; $O8s=""; $O8p=l1z; $O8q=NULL; $l8r=NULL; if ($O8g && $l8h) { $l8m=NULL; $O8m=NULL; $O8g=FALSE; $l8h=FALSE; } $l8i=NULL; $O8i=NULL; $l8j=NULL; $O8j=NULL; $l8k=NULL; $O8k=NULL; $l8n=NULL; $O8n=NULL; $O8w=NULL; $l8t=NULL; break; case (l2f): assert(!is_null($O8r),"C_ORDER: Order statistic ($O8r) is not null"); break; case (l2j): assert(!is_null($O8l) && !is_null($O8o) && !is_null($l8w),"C_STATISTIC: Field ($O8l), FieldOut ($O8o), Statistic ($l8w) are not null"); $O91=str_repeat(")",substr_count($l8w,"(")); $l8e[$O8o]=$l8w."(".$O8l.")".$O91; $O8l=NULL; break; case (O2i): assert(!is_null($l8o) && !is_null($O8o),"C_TERMS: Grouping field ($l8o), FieldOut ($O8o) are not null"); break; default : break; } $l47=$O8e["idx"][$l3a]; $O8z=$O8e["size"][$l3a]; if ($l4s == O23) { $O8h --; } $l4s=$O8e["context"][$l3a]; } else { if (DEBUG) echo "REACHED LAST KEY-VALUE PAIR\n"; if ($l8g === TRUE) { $l8l=DISCOVERSIZE; } $l8f=array("xaggs" => $O8d,"yaggs" => $l8e,"filterArray" => $O8f,"filter" => $l8x,"discover" => array("tab" => $l8g,"limit" => $l8l)); return $l8f; } } } } function O92($l93) { $O93=array(); foreach ($l93["xaggs"] as $O57) { $O93[]=O3c($O57); } $O93[]=O3c($l93["yaggs"]); $O93[]=$l93["filterArray"]; sort($O93[count($O93)-1]); $O93[]=O3c($l93["discover"]); return $O93; } function O7q($O30,$l30,$Oo,$l94,$ly) { $l31=O31($O30,$l30); $l57=$l94["xaggs"]; $O94=$l94["yaggs"]; $l95=$l94["filter"]; $O95=array_key_exists("onerec",$l94); $l96=$l94["discover"]; $O96=$l94["discover"]["limit"]; $l97=fopen($ly,"wt"); if (!$l97) { showmessage( __FUNCTION__ ,TAG_ERROR,"Error opening or creating file $ly\n. An empty response will be returned.\n"); return ""; } $O97=dbcreatedbh($l30,$Oo=$Oo,$l6d=array("dir" => DATADIR)); $l98=O98($O97,$O30,$l95,$O95); if (l99($l94,$l57,$O94)) { O99($O97,$O30,$l31,$l95,$l98,$O96,$l37=$l97); } else if (count($l57)+count($O94)>0) { l9a($O97,$O30,$l95,$l57,$O94,$l98,$l37=$l97); } else { $O9a=l9b($O97->getdbhandle(),$O30,$l95); O9b($O9a,$l37=$l97); O36("[]}",$l37=$l97); } O36("}",$l37=$l97); O6f($O97,$l6g=FALSE); fclose($l97); } function l9b($Op,$O30,$l95) { $l9c= "SELECT count(*) as _count from $O30"."\n".$l95; $O9c=dbdbhexecutesqlquery($Op,$l9c); if ($O9c === FALSE) { $O9a=0; } else { $O9a=$O9c[0]["_count"]; } if (DEBUG) { echo "\nTotal Hits:\n"; print_r($O9c); } return $O9a; } function l99($l9d,$l57,$O94) { assert(array_key_exists("discover",$l9d) && array_key_exists("limit",$l9d["discover"]) && array_key_exists("filter",$l9d),"The required keys exist in the input array \$aParseResult"); return $l9d["discover"]["tab"] === TRUE && count($l57) == 0 && count($O94) == 0; } function O99($O66,$O30,$l31,$l95,$O9d,$O96,$l37=NULL) { global $l9e; $l6c=O6c($O66,$O30); $O9e="SELECT ".O4u($O96,$O66->lp ,$l4v=0)." * FROM ("."SELECT ".$l9e[O1b][$O66->lp ]." as ".l1v; $O6u=l7c($l31); $O6r=array(); foreach ($O6u as $O5a => $l52) { if ($l52 === "date") { $O9e.=",".$O5a." as ".$O5a; $O6r[]=str_replace("\"","",$O5a); } else if ($l52 === "geo_point") { if (l66($O66,$l6c,$O5a) === TRUE) $O9e.=",".$O5a; } else { $O9e.=",".$O5a; } } $l9f=$O9d."(".$O9e."\nFROM ".$l6c.") innerQueryWithRowNumber"."\n".$l95."\n".O4u($O96,$O66->lp ,$l4v=1).") mainQuery"; $O6m=O6n($O66->getdbhandle(),$l9f); if ($O6m === FALSE) { O9b(0,$l37=$l37); O36("[",$l37=$l37); } else { $O9f=""; $l9g=0; while ($l60=l7t($O6m)) { $l9g ++; if ($l9g == 1) { $O9a=$l60["_count"]; O9b($O9a,$l37=$l37); O36("[",$l37=$l37); } foreach ($O6r as $O9g) { $l9h=date_create(strftime("%Y-%m-%d %H:%M:%S",$l60[$O9g])); $l4e=(array) $l9h; $O4e=timezone_offset_get(new \datetimezone($l9h->timezone),$l9h); $l60[$O9g]=($l60[$O9g]-$O4e)*01750; } $O9h=(PHP_INT_MAX-$l9g)/PHP_INT_MAX; $l9i=$O9f."{"."\"".l1f."\":\"".$l31."\","."\"".O1f."\":\"row\","."\"".l1g."\":\"".$l9g."\","."\"".l1h."\":".$O9h.","."\"".O1h."\":".json_encode($l60)."}"; O36($l9i,$l37=$l37); $O9f=","; } unset ($l60); } unset ($O6m); O36("]}",$l37=$l37); } function l9a($O66,$O30,$l95,$l57,$O94,$O9d,$l37=NULL) { if (count($l57) == 0) { O9i($O66,$O30,$l95,$O94,$O9d,$l37=$l37); } else { $O9a=l9b($O66->getdbhandle(),$O30,$l95); O9b($O9a,$l37=$l37); O36("[]}",$l37=$l37); O36(",\"aggregations\":{",$l37=$l37); l9j($O66,$O30,$l95,$l57,$O94,$l37=$l37); } O36("}",$l37=$l37); } function O98($O66,$O30,$l95,$O95) { if ($O95) { $O9j="WITH cnt as (SELECT ".O4u(1,$O66->lp ,$l4v=0)." 1 as _count FROM $O30 ".O4u(1,$O66->lp ,$l4v=1).")"."\nSELECT * FROM cnt"."\nCROSS JOIN "; } else { $O9j="WITH cnt as (SELECT count(*) as _count FROM ".$O30." ".$l95.")"."\nSELECT * FROM cnt"."\nCROSS JOIN "; } return $O9j; } function O9i($O66,$O30,$l95,$O94,$O9d,$l37=NULL) { $l9k=O9k($O94); $O9e=l9l($O30,$l95,"","",$l9k); $l9f=$O9d."(SELECT ".$O9e.") mainQuery"; $O9l=dbdbhexecutesqlquery($O66->getdbhandle(),$l9f,$O5="query"); if ($O9l === FALSE) { O9b(0,$l37=$l37); O36("[]",$l37=$l37); } else { assert(count($O9l) == 1,"There is exactly one row returned by the only-Y-axis-aggregations query"); $O9a=$O9l[0]["_count"]; O9b($O9a,$l37=$l37); O36("[]}",$l37=$l37); O36(",\"aggregations\":{",$l37=$l37); l9m($O9l[0],$O9m=1,$O9f="",$l37=$l37); } } function l9j($O66,$O30,$l95,$l57,$O94,$l37=NULL) { $l9k=O9k($O94); l9n($O66,$O30,$l95,$l57,0,$O94,$l9k,$l37=$l37); } function l9n($O66,$O30,$l95,$l57,$l3a,$O94,$l9k,$l37=NULL) { assert($l3a>=0,"Grouping level is non-negative"); assert(count($l57)>$l3a,"The xaggs array has more than \$level elements (count(\$xaggs)=".count($l57).", level=$l3a)"); $l9f=O9n($O66,$O30,$l95,$l57,$l3a,$O94); $O6m=O6n($O66->getdbhandle(),$l9f); $l60=l7t($O6m); $O9f=""; $l9o=0; if ($l60) { O9o($l57[$l3a]["type"],$l3a,$l57[$l3a]["ofield"],$l37=$l37); do { l9p($l57[$l3a]["type"],$l60,$O9f,$l37=$l37); $O9p=($l3a == count($l57)-1); if (!$O9p) { $l9q=$l60[$l57[$l3a]["ofield"]]; $O9q=l9r($l95,$l57,$l3a,$l9q); $O9r=dbcreatedbh($O66->lo ,$Oo=$O66->Oo ,$l6d=array("dir" => "")); l9n($O9r,$O30,$O9q,$l57,$l3a+1,$O94,$l9k,$l37=$l37); unset ($O9r); } O36("}",$l37=$l37); $l60=l7t($O6m); $O9f=","; } while ($l60); l9s($l57[$l3a]["type"],$l37=$l37); } unset ($l60); unset ($O6m); } function l9r($l95,$l57,$l3a,$l9q) { $O9s=$l57[$l3a]["ifield_parsed"]; $l9t=$l57[$l3a]["type"]; if ($l9t == "t" || $l9t == "r" || $l9t == "rd") $O9t="'".l3z($l9q)."'"; else $O9t=$l9q; if (preg_match("/^\\s*WHERE/",$l95)>0) { $O4r=" AND "; } else { $O4r="WHERE "; } return $l95.$O4r.$O9s." = ".$O9t; } function O9n($O66,$O30,$l95,&$l57,$l3a,$O94) { $l57[$l3a]=l9u($O66,$O30,$l95,$l57[$l3a],$O94); $O9u=l3x($l57[$l3a]["ofield"]); $l9v=O9v($O66,$O30,$l95,$l57,$l3a,$O94); $l9k=O9k($O94); $O9e=l9l($O30,$l95,$l9v["field"],$l9v["statement"],$l9k); $l9f=""; if ($l57[$l3a]["type"] == "r" or $l57[$l3a]["type"] == "rd") { $l9f.="\nSELECT".$l57[$l3a]["ranges_clause"]." r"."\nLEFT JOIN (".O1c."SELECT ".$O9e.O1c."\t) d"."\nON r._range = d.".$O9u; } else { $l9f.="\nSELECT ".O4u($l57[$l3a]["limit"],$O66->lp ,$l4v=0).$O9e; } assert($l57[$l3a]["order"] != NULL && $l57[$l3a]["order"] != "","Order variable is not null nor empty"); $l9w=O9w($l57[$l3a]["order"]); $l9f.="\nORDER BY ".$l9w."\n".O4u($l57[$l3a]["limit"],$O66->lp ,$l4v=1); return $l9f; } function l9u($O66,$O30,$l95,$l9x,$O94) { switch ($l9x["type"]) { case ("r"): case ("rd"): $O9x=l9y($O66,$l9x["ofield"],$l9x["ranges"],$O94); $l9x["order"]=$O9x["order"]; $l9x["ifield_parsed"]=$l9x["ifield"]; $l9x["ranges_clause"]=$O9x["sqlclause"]; break; case ("h"): case ("hd"): $O9x=O9y($O66,$O30,$l95,$l9x["ifield"],$l9x["type"],$l9x["interval"]); $l9x["ifield_parsed"]=$O9x["sqlclause"]; $l9x["interval"]=$O9x["interval"]; break; default : $l9x["ifield_parsed"]=$l9x["ifield"]; break; } return $l9x; } function l9y($O66,$l4y,$l9z,$O94) { assert(count($l9z)>0,"There is at least one RANGE value"); global $l9e; $O9u=l3x($l4y); $l9k=O9k($O94,$O9z=TRUE); $la0=O1c."_range as ".$O9u.O1c.",".$l9e[l1c][$O66->lp ]."(_count,0) as _count".$l9k."\nFROM ("; $Oa0=""; foreach ($l9z as $O4k) { $la1=l4k($O4k); $Oa1=$la1[0]; if ($Oa1 === "") $Oa1="NULL"; $la0.=$Oa0."\nSELECT '$O4k' as _range, $Oa1 as _range_from"; $Oa0="\nUNION "; } $la0.="\n)"; if (DEBUG) { echo "SQL for _RANGES:\n"; echo $la0."\n"; } return array("sqlclause" => $la0,"order" => "_range_from"); } function O9y($O66,$O30,$l95,$O5a,$la2,$l53) { global $O5b; assert($la2 === "h" || $la2 === "hd","The histogram aggregation type is either 'h' or 'hd'"); $Oa2= function (&$la3,&$l5d,$Oa3,$la4) { $Oa4=$la4-$Oa3; if ($l5d === "s" && $Oa4>l1k) { $la3=1; $l5d="m"; } if ($l5d === "m" && $Oa4/074>l1k) { $la3=1; $l5d="h"; } $l53=$la3.$l5d; return $l53; }; $l9f= "SELECT min($O5a) as _min, max($O5a) as _max FROM $O30 $l95"; $la5=dbdbhexecutesqlquery($O66->getdbhandle(),$l9f,$O5="query"); if ($la5 === FALSE || count($la5) == 0) { $la0=""; } else { $Oa5=$la5[0]["_min"]; $la6=$la5[0]["_max"]; if ($Oa5 === "" || $la6 === "") { $la0="(CASE WHEN 1 THEN null END)"; } else { if ($la2 == "h") { assert($l53>0,"The histogram interval value (bin size) is positive"); $Oa6=floor($Oa5/$l53)*$l53; $la7=$la6; $Oa7=floor(($la7-$Oa6)/$l53)+1; if ($Oa7 == 0) $la8=1; $Oa8="(CASE"; $la9=$Oa6; for ($O3u=0; $O3u<$Oa7; $O3u ++) { $Oa9=$la9+$l53; $Oa8.=O1c."WHEN $la9 <= $O5a AND $O5a < $Oa9 THEN $la9"; $la9=$Oa9; } } else { $l5d=date_create(gmstrftime("%Y-%m-%d %H:%M:%S",$Oa5),new \datetimezone("UTC")); $O5d=(array) $l5d; $la3=max(1,round(substr($l53,0,strlen($l53)-1)))*1; $l4i=substr($l53,strlen($l53)-1); assert($la3>0,"The date step is positive (value given: $la3)\n"); assert(array_key_exists($l4i,$O5b) !== FALSE,"The period definition is one of the 7 valid one (value given: $l4i)\n"); $l53=$Oa2($la3,$l4i,$Oa5,$la6); l4j($l5d,$l4i); $Oa6=date_timestamp_get($l5d); $la7=$la6; $Oa8="(CASE"; $la9=$Oa6; while ($la9<=$la7) { date_modify($l5d,"$la3 ".$O5b[$l4i]); $O5d=(array) $l5d; $Oa9=date_timestamp_get($l5d); $laa=$la9; $Oa8.=O1c."WHEN $la9 <= $O5a AND $O5a < $Oa9 THEN $laa"; $la9=$Oa9; } } $la0=$Oa8."\nEND)"; } } return array("sqlclause" => $la0,"interval" => $l53); } function O9v($O66,$O30,$l95,&$l57,$l3a,$O94) { $l57[$l3a]=l9u($O66,$O30,$l95,$l57[$l3a],$O94); $O9u=l3x($l57[$l3a]["ofield"]); $Oaa=$l57[$l3a]["ifield_parsed"]." as ".$O9u; $lab="GROUP BY ".$l57[$l3a]["ifield_parsed"]; return array("field" => $Oaa,"statement" => $lab); } function O9k($O94,$O9z=FALSE) { $l9k=""; if ($O9z === TRUE) { foreach (array_keys($O94) as $Oab) { $l9k.=O1c.",".l3x($Oab); } } else { foreach ($O94 as $Oab => $lac) { $l9k.=O1c.",".$lac." as ".l3x($Oab); } } return $l9k; } function l9l($O30,$l95,$Oac,$lab,$lad) { $Oad=""; if (strlen($Oac)>0) { $Oad=","; } $O9e=O1c.$Oac.O1c.$Oad."count(*) as _count".$lad."\nFROM ".$O30."\n".$l95."\n".$lab; return $O9e; } function O9w($l9w,$lae="_count") { return str_ireplace("count(*)",$lae,$l9w); } function O9b($O9a,$l37=NULL) { assert($O9a !== NULL,"The number of total hits is not null"); $Oae="{"; $laf="\"took\":0,"."\"timed_out\":false,"."\"_shards\":{"."\"total\":5,"."\"successful\":5,"."\"failed\":0"."},"; $Oaf="\"hits\":{"."\"total\":".$O9a.","."\"max_score\":0,"."\"hits\":"; O36($Oae.$laf.$Oaf,$l37=$l37); } function O9o($l52,$l3a,$l4y,$l37=NULL) { $lag=""; $O9f=","; if ($l3a == 0) $O9f=""; $O35=$O9f.l3x($l4y).":{"; switch ($l52) { case ("t"): $O35.="\"doc_count_error_upper_bound\":0,"; $O35.="\"sum_other_doc_count\":0,"; $lag="["; break; case ("g"): case ("h"): case ("hd"): $lag="["; break; case ("r"): case ("rd"): $lag="{"; break; default : break; } $O35.="\"".l26."\":".$lag; O36($O35,$l37=$l37); } function l9p($l52,$Oag,$O9f,$l37=NULL) { lah($l52,$Oag,$O9f,$l37=$l37); l9m($Oag,$O9m=2,$Oah=",",$l37=$l37); } function lah($l52,$Oag,$O9f="",$l37=NULL) { $O3d=array_keys($Oag); $l3c=$Oag[$O3d[0]]; $O35=$O9f; switch ($l52) { case ("t"): case ("g"): case ("h"): case ("hd"): $O35.="{"; if (l35($l3c) === FALSE) $lai=l3x($l3c); else { if ($l52 == "hd") { if (PHP_SAPI !== "cli") { $l3c=l4d($l3c); } $lai=$l3c*01750; } else $lai=$l3c; } $O35.="\"key\":".$lai.","; break; case ("r"): case ("rd"): $O35.=l3x($l3c).":{"; $l5e=l4k($l3c); $O4m=$l5e[0]; $l4n=$l5e[1]; if ($l52 == "rd") { if (PHP_SAPI !== "cli") { $O4m=l4d($O4m); $l4n=l4d($l4n); } $O4m=$O4m*01750; $l4n=$l4n*01750; } $O35.="\"from\":".$O4m.","; $O35.="\"from_as_string\":".l3x($O4m).","; $O35.="\"to\":".$l4n.","; $O35.="\"to_as_string\":".l3x($l4n).","; break; default : break; } $O35.="\"doc_count\":".$Oag["_count"]; O36($O35,$l37=$l37); } function l9m($Oag,$O9m=2,$O9f=",",$l37=NULL) { $O3d=array_keys($Oag); $Oai=count($Oag); $O35=""; for ($O3u=$O9m; $O3u<$Oai; $O3u ++) { $O5a=$O3d[$O3u]; $l3c=$Oag[$O3d[$O3u]]; $O35.=$O9f.l3x($O5a).":{"; if ($l3c === NULL || $l3c === "") $O35.="\"value\":null"; else $O35.="\"value\":".$l3c; $O35.="}"; $O9f=","; } O36($O35,$l37=$l37); } function l9s($l52,$l37=NULL) { $laj=""; switch ($l52) { case ("t"): case ("g"): case ("h"): case ("hd"): $laj="]"; break; case ("r"): case ("rd"): $laj="}"; break; default : break; } $O35=$laj."}"; O36($O35,$l37=$l37); }