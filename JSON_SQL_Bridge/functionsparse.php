<?php
/*
JSON_SQL_Bridge 1.0
Copyright 2016 Frank Vanden berghen
All Right reserved.

JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License".
If you are interested in distributing, reselling, modifying, contibuting or in general creating
any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
*/
namespace kibella; use O33\l34\l8f\O8f; function l8g($O7q,$l31,$O30) { $O38=json_decode($O7q,TRUE); $O31=l32($l31,$O30); $l6y=O7f($O31); $l6a=l38($O38,"kibella\\parseEsJsonQueryElement",array("fieldtypes" => $l6y)); return $l6a; } function parseesjsonqueryelement($O3c,$O4t,$l3a,$O3a,$l3b,$O39) { static $O8g; static $l8h; static $O8h; static $l8i; static $O8i; static $l8j; static $O8j; static $l8k; static $O8k; static $l8l; static $O8l; static $l8m; static $O8m; static $l8n; static $O8n; static $l8o; static $O8o; static $l8p; static $O8p; static $l8q; static $O8q; static $l8r; static $O8r; static $l8s; static $O8s; static $l8t; static $O8t; static $l8u; static $O8u; static $l8v; static $O8v; static $l8w; static $O8w; static $l8x; static $O8x; static $l8y; static $O8y; static $l8z; static $O8z; static $l90; static $O90; global $l91; global $O91; if ($l3a == 0 && $O3a == 0) { $O8g=array(); $l8h=array(); $O8h=array(); $l8i=array("level" => 0,"context" => array(l2i),"idx" => array(-1),"size" => array($l3b)); $l8j=array(); $O8j=FALSE; $l8k=FALSE; $O8k=FALSE; $l8l=-1; $O8l=NULL; $l8m=NULL; $O8m=NULL; $l8n=NULL; $O8n=NULL; $l8o=NULL; $O8o=DISCOVERSIZE; $l8p=NULL; $O8p=NULL; $l8q=NULL; $l8r=NULL; $O8q=NULL; $O8r=NULL; $l8s=NULL; $O8s=NULL; $l8t=O1z; $O8t=""; $l8u=NULL; $O8u=NULL; $l8v=NULL; $O8v=""; $l8w=""; $O8w=NULL; $l8x=""; $O8x=NULL; $l8y=NULL; $O8y=NULL; $l8z=NULL; $O8z=NULL; $l90=NULL; $O90=""; if (array_key_exists("fieldtypes",$O39)) $O8g=$O39["fieldtypes"]; } if ($O3a>$l8i["level"]) { return $O8i; } $l8i["idx"][$l8i["level"]]++; if (is_array($O3c) && count($O3c)>0) { $l8i["level"]++; $l4u=$l8i["context"][$l8i["level"]-1]; $O4t=l4t($O4t,$l4u); if (array_search(NULL,$l91[$l4u]) !== FALSE || array_search(( string) $O4t,$l91[$l4u]) !== FALSE || $l4u == O24 && array_search(( string) $O4t,$l91[O24][0]) !== FALSE) { if ($O4t === l24) { $l8l ++; } else if ($O4t === O2c) { $O8j=TRUE; } switch ($l4u) { case (l24): $l8s=$O4t; $l8i["context"][]=O24; $l8y="(CASE"; break; case (O24): if ($l3c=array_search($O4t,$l91[O24][0]) !== FALSE) { $O8z=$O91[$O4t]; $l8i["context"][]=O2j; } else if ($l3c=array_search($O4t,array_slice($l91[O24],1)) !== FALSE) { $l8i["context"][]=$O4t; } else l88($O4t,$l4u,$l91,"COMPOUND",2); break; case (l26): if ($O4t === l2e) $O8t=""; else if ($O4t === O2e) $O8t=" not "; $l8i["context"][]=$O4t; break; case (O29): if (strpos($O4t,"(CASE WHEN ") === 0) { $O8q=$O4t; } else { $O8q=O3x($O4t); } $l8i["context"][]=l2a; break; case (O2a): $l8r=O3x($O4t); $l8i["context"][]=l2b; break; case (O27): $l92=O3x($O4t); $O92=O46($O4t); $O8p=O3x($O92."_".O2o); $l8q=O3x($O92."_".l2o); $l8i["context"][]=O28; break; case (O28): switch (( string) $O4t) { case (l28): case (l29): $l8i["context"][]=$O4t; break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; default : if (gettype($O4t) == "integer") { $l93=end($l8i["size"]); reset($l8i["size"]); if ($l93>1) { $l3a=$O4t; if ($l3a == $l93-1) { $l8w=")"; } if ($l3a == 0) { $O8v="("; } else { $l8t=" and "; $O8v=""; if ($l3a<$l93-1) $l8w=""; } } $l8i["context"][]=$l4u; } else $l8i["context"][]=$O4t; break; } } else { l88($O4t,$l4u,$l91,"COMPOUND",1); $l8i["context"][]=$l4u; } if (DEBUG) { echo "CONTEXT history\n"; print_r($l8i["context"]); } $l8i["idx"][]=-1; $l8i["size"][]=count($O3c); $l4u=$l8i["context"][$l8i["level"]]; if (DEBUG) echo "Keyword: $O4t => Entering context ".$l4u."... (field aggregation level is $l8l)\n"; } else { $O3a=$l8i["level"]; $O47=$l8i["idx"][$O3a]; $l93=$l8i["size"][$O3a]; $l4u=$l8i["context"][$O3a]; $O4t=l4t($O4t,$l4u); switch ($l4u) { case (l2d): case (O2d): $l8h[$l8l]["ofield"]=$l8s; if ($l4u == l2d) $l8h[$l8l]["type"]="h"; else $l8h[$l8l]["type"]="hd"; $l8h[$l8l]["order"]=O3x($l8s); $l8h[$l8l]["limit"]=0; switch (( string) $O4t) { case (l2m): $O8r=O3x($O3c); $l8h[$l8l]["ifieldname"]=$O8r; $l8h[$l8l]["ifield"]=$O8r; break; case (l2q): $l8h[$l8l]["interval"]=$O3c; break; case (l2s): break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; case (l2c): $l8h[$l8l]["ofield"]=$l8s; $l8h[$l8l]["type"]="g"; $l8h[$l8l]["order"]=O3x($l8s); $l8h[$l8l]["limit"]=0; switch (( string) $O4t) { case (l2m): $O8r=$O3c; $l8h[$l8l]["ifieldname"]=O3x(O46($O8r)); break; case (l2t): $l8h[$l8l]["ifield"]=O3x(O46($O8r)."_geohash".$O3c); break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; case (l28): switch (( string) $O4t) { case (l2o): $l8n=$O3c; break; case (O2o): $O8l=$O3c; break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; case (l29): switch (( string) $O4t) { case (l2o): $O8m=$O3c; break; case (O2o): $l8m=$O3c; break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; case (l2a): switch (( string) $O4t) { case (O2s): $l8t=$O3c; break; case (O2t): $l90=O40($O3c); break; case (O2v): if ($O3c === "phrase") $l8x="'"; else $l8x=""; break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; case (O2f): if ($O4t === O2k) { $l8v=$O91[O21]."(*)"." ".$O3c; } else { $l8v=O3x($O4t)." ".$O3c; } assert(!is_null($l8h[$l8l]["ifield"]),"The aggregation field name is NOT null"); $l8h[$l8l]["order"]=$l8v.", ".$l8h[$l8l]["ifield"]; break; case (O2g): switch (( string) $O4t) { case (l2k): break; case (O2t): if ($O3c === "*") $O8w="1 = 1"; else $O8w=$O3c; $l8j[]=trim($O8w); break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; case (l25): case (O25): $l8h[$l8l]["ofield"]=$l8s; if ($l4u == l25) { $l8h[$l8l]["type"]="r"; } else { $l8h[$l8l]["type"]="rd"; } $l8h[$l8l]["order"]=O3x($l8s); $l8h[$l8l]["limit"]=0; switch (( string) $O4t) { case (l2m): $O8r=O3x($O3c); $l8h[$l8l]["ifieldname"]=$O8r; break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; case (l2b): switch (( string) $O4t) { case (l2n): $O8s=$O3c; break; case (l2p): case (O2p): $l8o=O4u($O3c,$l8r,$O8g,"date","/1000"); if ($O4t === l2r) $l8u=">"; else $l8u=">="; break; case (l2r): case (O2r): $O8n=O4u($O3c,$l8r,$O8g,"date","/1000"); if ($O4t === l2r) $O8u="<"; else $O8u="<="; break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; case (O2h): switch (( string) $O4t) { case (O2n): if ($l8h[$l8l]["type"] == "rd") { $O3c=l4h($O3c); } $O8x=$O3c; $O8y=$O3c."-"; break; case (l2v): if ($l8h[$l8l]["type"] == "rd") { $O3c=l4h($O3c); } $l8z=$O3c; $O8y.=$O3c; $l8y.=l1d."WHEN ".$O8x." <= ".$O8r." AND ".$O8r." < ".$l8z." THEN "."'".$O8y."'"; $l8h[$l8l]["ranges"][]=$O8y; break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; case (l2i): if ($O4t === O2u) { $O8o=$O3c; } else l88($O4t,$l4u,$l91,"LEAF"); break; case (O2j): switch (( string) $O4t) { case (l2m): $l8p=O3x($O3c); break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; case (l2j): $l8h[$l8l]["ofield"]=$l8s; $l8h[$l8l]["type"]="t"; switch (( string) $O4t) { case (l2m): $O8r=O3x($O3c); $l8h[$l8l]["ifieldname"]=$O8r; $l8h[$l8l]["ifield"]=$O8r; break; case (O2u): $O8o=$O3c; $l8h[$l8l]["limit"]=$O8o; break; default : l88($O4t,$l4u,$l91,"LEAF"); break; } break; default : O8a($l4u,"LEAF"); break; } while ($O47 == $l93-1 && $O3a>=0) { if (DEBUG) echo "\tRemoving data from level: ".$O3a."\n"; $O3a --; $l8i["level"]=$O3a; foreach (array_slice($l8i,1) as $O93 => $l94) { array_pop($l8i[$O93]); } assert($O3a>=-1,"\$level >= -1"); if ($O3a>=0) { switch ($l4u) { case (O24): $l8p=NULL; $l8s=NULL; $O8z=NULL; break; case (l25): case (O25): assert(!is_null($l8y) && !is_null($l8s),"C_AGGS_RANGE: Range grouping ($l8y), FieldOut ($l8s) are not null"); $l8y.="\nEND)"; $l8h[$l8l]["ifield"]=$l8y; break; case (l28): case (l29): case (l2a): case (l2b): case (O2g): if ($l4u == l28 && !is_null($O8p) && !is_null($l8q) && !is_null($O8l) && !is_null($l8n)) { if (!$O8k) { $O94="("; $l95=""; } else { $O94=""; $l95=")"; } $O8w=$O94.$l8n." <= ".$l8q." and ".$O8p." <= ".$O8l.$l95; $l8k=TRUE; } else if ($l4u == l29 && !is_null($O8p) && !is_null($l8q) && !is_null($l8m) && !is_null($O8m)) { if (!$l8k) { $O94="("; $l95=""; } else { $O94=""; $l95=")"; } $O8w=$O94.$l8m." <= ".$O8p." and ".$l8q." <= ".$O8m.$l95; $O8k=TRUE; } else if ($l4u == l2a && !is_null($O8q) && !is_null($l90)) { $O8w=$O8q." = ".$l8x.O3z($l90).$l8x; } else if ($l4u == l2b && !is_null($l8o) && !is_null($O8n)) { $O8w= "$l8r $l8u $l8o and $l8r $O8u $O8n"; } $O95=$O8v.$O8t; if ($O90 == "") $O90="WHERE"; else { if (($l8k+$O8k)<2) $O95=$l8t.$O8v.$O8t; else $O95=$l8t.$O8v; } if (!is_null($O8w)) { $O90.="\n".$O95."(".$O8w.")".$l8w; } $l8j[]=trim($O8t.$O8w); $O8v=""; $l8w=""; $l8t=O1z; $l8u=NULL; $O8u=NULL; if ($l8k && $O8k) { $O8p=NULL; $l8q=NULL; $l8k=FALSE; $O8k=FALSE; } $O8l=NULL; $l8m=NULL; $O8m=NULL; $l8n=NULL; $O8n=NULL; $l8o=NULL; $O8q=NULL; $l8r=NULL; $l90=NULL; $O8w=NULL; break; case (O2f): assert(!is_null($l8v),"C_ORDER: Order statistic ($l8v) is not null"); break; case (O2j): assert(!is_null($l8p) && !is_null($l8s) && !is_null($O8z),"C_STATISTIC: Field ($l8p), FieldOut ($l8s), Statistic ($O8z) are not null"); $l95=str_repeat(")",substr_count($O8z,"(")); $O8h[$l8s]=$O8z."(".l48($l8p,$O8g).")".$l95; $l8p=NULL; break; case (l2j): assert(!is_null($O8r) && !is_null($l8s),"C_TERMS: Grouping field ($O8r), FieldOut ($l8s) are not null"); break; default : break; } $O47=$l8i["idx"][$O3a]; $l93=$l8i["size"][$O3a]; if ($l4u == l24) { $l8l --; } $l4u=$l8i["context"][$O3a]; } else { if (DEBUG) echo "REACHED LAST KEY-VALUE PAIR\n"; if ($O8j === TRUE) { $O8o=DISCOVERSIZE; } $O8i=array("xaggs" => $l8h,"yaggs" => $O8h,"filterArray" => $l8j,"filter" => $O90,"discover" => array("tab" => $O8j,"limit" => $O8o)); return $O8i; } } } } function l96($O96) { $l97=array(); foreach ($O96["xaggs"] as $l5b) { $l97[]=l3d($l5b); } $l97[]=l3d($O96["yaggs"]); $l97[]=$O96["filterArray"]; sort($l97[count($l97)-1]); $l97[]=l3d($O96["discover"]); return $l97; } function l7u($l31,$O30,$Oo,$O97,$Oy) { $O31=l32($l31,$O30); $O5a=$O97["xaggs"]; $l98=$O97["yaggs"]; $O98=$O97["filter"]; $l99=array_key_exists("onerec",$O97); $O99=$O97["discover"]; $l9a=$O97["discover"]["limit"]; $O9a=fopen($Oy,"wt"); if (!$O9a) { showmessage( __FUNCTION__ ,TAG_ERROR,"Error opening or creating file $Oy\n. An empty response will be returned.\n"); return ""; } $l9b=dbcreatedbconnection($O30,$Oo=$Oo,$l6g=array("dir" => DATADIR)); $O9b=l9c($l9b,$l31,$O98,$l99); if (O9c($O97,$O5a,$l98)) { l9d($l9b,$l31,$O31,$O98,$O9b,$l9a,$O37=$O9a); } else if (count($O5a)+count($l98)>0) { O9d($l9b,$l31,$O98,$O5a,$l98,$O9b,$O37=$O9a); } else { $l9e=O9e($l9b->getdbhandle(),$l31,$O98); l9f($l9e,$O37=$O9a); l37("[]}",$O37=$O9a); } l37("}",$O37=$O9a); l6j($l9b,$O6j=FALSE); fclose($O9a); } function O9e($Op,$l31,$O98) { $O9f= "SELECT count(*) as _count from $l31"."\n".$O98; $l9g=dbdbhexecutesqlquery($Op,$O9f); if ($l9g === FALSE) { $l9e=0; } else { $l9e=$l9g[0]["_count"]; } if (DEBUG) { echo "\nTotal Hits:\n"; print_r($l9g); } return $l9e; } function O9c($O9g,$O5a,$l98) { assert(array_key_exists("discover",$O9g) && array_key_exists("limit",$O9g["discover"]) && array_key_exists("filter",$O9g),"The required keys exist in the input array \$aParseResult"); return $O9g["discover"]["tab"] === TRUE && count($O5a) == 0 && count($l98) == 0; } function l9d($O69,$l31,$O31,$O98,$l9h,$l9a,$O37=NULL) { global $O9h; $l6f=O6f($O69,$l31); $l9i="SELECT ".l4y($l9a,$O69->lp ,$O4y=0)." * FROM ("."SELECT ".$O9h[l1c][$O69->lp ]." as ".O1v; $l6y=O7f($O31); $l6v=array(); foreach ($l6y as $O48 => $O55) { if ($O55 === "date") { $l9i.=",".$O48." as ".$O48; $l6v[]=str_replace("\"","",$O48); } else if ($O55 === "geo_point") { if (l69($O69,$l6f,$O48) === TRUE) $l9i.=",".$O48; } else { $l9i.=",".$O48; } } $O9i=$l9h."(".$l9i."\nFROM ".$l6f.") innerQueryWithRowNumber"."\n".$O98."\n".l4y($l9a,$O69->lp ,$O4y=1).") mainQuery"; $l6q=l6r($O69->getdbhandle(),$O9i); if ($l6q === FALSE) { l9f(0,$O37=$O37); l37("[",$O37=$O37); } else { $l9j=""; $O9j=0; while ($l63=O7w($l6q)) { $O9j ++; if ($O9j == 1) { $l9e=$l63["_count"]; l9f($l9e,$O37=$O37); l37("[",$O37=$O37); } foreach ($l6v as $l9k) { $O9k=date_create(strftime("%Y-%m-%d %H:%M:%S",$l63[$l9k])); $l4g=(array) $O9k; $O4g=timezone_offset_get(new \datetimezone($O9k->timezone),$O9k); $l63[$l9k]=($l63[$l9k]-$O4g)*01750; } $l9l=(PHP_INT_MAX-$O9j)/PHP_INT_MAX; $O9l=$l9j."{"."\"".O1f."\":\"".$O31."\","."\"".l1g."\":\"row\","."\"".O1g."\":\"".$O9j."\","."\"".O1h."\":".$l9l.","."\"".l1i."\":".json_encode($l63)."}"; l37($O9l,$O37=$O37); $l9j=","; } unset ($l63); } unset ($l6q); l37("]}",$O37=$O37); } function O9d($O69,$l31,$O98,$O5a,$l98,$l9h,$O37=NULL) { if (count($O5a) == 0) { l9m($O69,$l31,$O98,$l98,$l9h,$O37=$O37); } else { $l9e=O9e($O69->getdbhandle(),$l31,$O98); l9f($l9e,$O37=$O37); l37("[]}",$O37=$O37); l37(",\"aggregations\":{",$O37=$O37); O9m($O69,$l31,$O98,$O5a,$l98,$O37=$O37); } l37("}",$O37=$O37); } function l9c($O69,$l31,$O98,$l99) { if ($l99) { $l9n="WITH cnt as (SELECT ".l4y(1,$O69->lp ,$O4y=0)." 1 as _count FROM $l31 ".l4y(1,$O69->lp ,$O4y=1).")"."\nSELECT * FROM cnt"."\nCROSS JOIN "; } else { $l9n="WITH cnt as (SELECT count(*) as _count FROM ".$l31." ".$O98.")"."\nSELECT * FROM cnt"."\nCROSS JOIN "; } return $l9n; } function l9m($O69,$l31,$O98,$l98,$l9h,$O37=NULL) { $O9n=l9o($l98); $l9i=O9o($l31,$O98,"","",$O9n); $O9i=$l9h."(SELECT ".$l9i.") mainQuery"; $l9p=dbdbhexecutesqlquery($O69->getdbhandle(),$O9i,$O5="query"); if ($l9p === FALSE) { l9f(0,$O37=$O37); l37("[]",$O37=$O37); } else { assert(count($l9p) == 1,"There is exactly one row returned by the only-Y-axis-aggregations query"); $l9e=$l9p[0]["_count"]; l9f($l9e,$O37=$O37); l37("[]}",$O37=$O37); l37(",\"aggregations\":{",$O37=$O37); O9p($l9p[0],$l9q=1,$l9j="",$O37=$O37); } } function O9m($O69,$l31,$O98,$O5a,$l98,$O37=NULL) { $O9n=l9o($l98); O9q($O69,$l31,$O98,$O5a,0,$l98,$O9n,$O37=$O37); } function O9q($O69,$l31,$O98,$O5a,$O3a,$l98,$O9n,$O37=NULL) { assert($O3a>=0,"Grouping level is non-negative"); assert(count($O5a)>$O3a,"The xaggs array has more than \$level elements (count(\$xaggs)=".count($O5a).", level=$O3a)"); $O9i=l9r($O69,$l31,$O98,$O5a,$O3a,$l98); $l6q=l6r($O69->getdbhandle(),$O9i); $l63=O7w($l6q); $l9j=""; $O9r=0; if ($l63) { l9s($O5a[$O3a]["type"],$O3a,$O5a[$O3a]["ofield"],$O37=$O37); do { O9s($O5a[$O3a]["type"],$l63,$l9j,$O37=$O37); $l9t=($O3a == count($O5a)-1); if (!$l9t) { $O9t=$l63[$O5a[$O3a]["ofield"]]; $l9u=O9u($O98,$O5a,$O3a,$O9t); $l9v=dbcreatedbconnection($O69->lo ,$Oo=$O69->Oo ,$l6g=array("dir" => ""),$O6g=array("new" => TRUE)); O9q($l9v,$l31,$l9u,$O5a,$O3a+1,$l98,$O9n,$O37=$O37); unset ($l9v); } l37("}",$O37=$O37); $l63=O7w($l6q); $l9j=","; } while ($l63); O9v($O5a[$O3a]["type"],$O37=$O37); } unset ($l63); unset ($l6q); } function O9u($O98,$O5a,$O3a,$O9t) { $l9w=$O5a[$O3a]["ifield_parsed"]; $O9w=$O5a[$O3a]["type"]; if ($O9w == "t" || $O9w == "r" || $O9w == "rd") $l9x="'".O3z($O9t)."'"; else $l9x=$O9t; if (preg_match("/^\\s*WHERE/",$O98)>0) { $O4t=" AND "; } else { $O4t="WHERE "; } return $O98.$O4t.$l9w." = ".$l9x; } function l9r($O69,$l31,$O98,&$O5a,$O3a,$l98) { $O5a[$O3a]=O9x($O69,$l31,$O98,$O5a[$O3a],$l98); $l9y=O3x($O5a[$O3a]["ofield"]); $O9y=l9z($O69,$l31,$O98,$O5a,$O3a,$l98); $O9n=l9o($l98); $l9i=O9o($l31,$O98,$O9y["field"],$O9y["statement"],$O9n); $O9i=""; if ($O5a[$O3a]["type"] == "r" or $O5a[$O3a]["type"] == "rd") { $O9i.="\nSELECT".$O5a[$O3a]["ranges_clause"]." r"."\nLEFT JOIN (".l1d."SELECT ".$l9i.l1d."\t) d"."\nON r._range = d.".$l9y; } else { $O9i.="\nSELECT ".l4y($O5a[$O3a]["limit"],$O69->lp ,$O4y=0).$l9i; } assert($O5a[$O3a]["order"] != NULL && $O5a[$O3a]["order"] != "","Order variable is not null nor empty"); $O9z=la0($O5a[$O3a]["order"]); $O9i.="\nORDER BY ".$O9z."\n".l4y($O5a[$O3a]["limit"],$O69->lp ,$O4y=1); return $O9i; } function O9x($O69,$l31,$O98,$Oa0,$l98) { switch ($Oa0["type"]) { case ("r"): case ("rd"): $la1=Oa1($O69,$Oa0["ofield"],$Oa0["ranges"],$l98); $Oa0["order"]=$la1["order"]; $Oa0["ifield_parsed"]=$Oa0["ifield"]; $Oa0["ranges_clause"]=$la1["sqlclause"]; break; case ("h"): case ("hd"): $la1=la2($O69,$l31,$O98,$Oa0["ifield"],$Oa0["type"],$Oa0["interval"]); $Oa0["ifield_parsed"]=$la1["sqlclause"]; $Oa0["interval"]=$la1["interval"]; break; default : $Oa0["ifield_parsed"]=$Oa0["ifield"]; break; } return $Oa0; } function Oa1($O69,$O51,$Oa2,$l98) { assert(count($Oa2)>0,"There is at least one RANGE value"); global $O9h; $l9y=O3x($O51); $O9n=l9o($l98,$la3=TRUE); $Oa3=l1d."_range as ".$l9y.l1d.",".$O9h[O1c][$O69->lp ]."(_count,0) as _count".$O9n."\nFROM ("; $la4=""; foreach ($Oa2 as $O4m) { $Oa4=l4m($O4m); $la5=$Oa4[0]; if ($la5 === "") $la5="NULL"; $Oa3.=$la4."\nSELECT '$O4m' as _range, $la5 as _range_from"; $la4="\nUNION "; } $Oa3.="\n)"; if (DEBUG) { echo "SQL for _RANGES:\n"; echo $Oa3."\n"; } return array("sqlclause" => $Oa3,"order" => "_range_from"); } function la2($O69,$l31,$O98,$O48,$Oa5,$O56) { global $O5e; assert($Oa5 === "h" || $Oa5 === "hd","The histogram aggregation type is either 'h' or 'hd'"); $la6= function (&$Oa6,&$l5g,$la7,$Oa7) { $la8=$Oa7-$la7; if ($l5g === "s" && $la8>O1k) { $Oa6=1; $l5g="m"; } if ($l5g === "m" && $la8/074>O1k) { $Oa6=1; $l5g="h"; } $O56=$Oa6.$l5g; return $O56; }; $O9i= "SELECT min($O48) as _min, max($O48) as _max FROM $l31 $O98"; $Oa8=dbdbhexecutesqlquery($O69->getdbhandle(),$O9i,$O5="query"); if ($Oa8 === FALSE || count($Oa8) == 0) { $Oa3=""; } else { $la9=$Oa8[0]["_min"]; $Oa9=$Oa8[0]["_max"]; if ($la9 === "" || $Oa9 === "") { $Oa3="(CASE WHEN 1 THEN null END)"; } else { if ($Oa5 == "h") { assert($O56>0,"The histogram interval value (bin size) is positive"); $laa=floor($la9/$O56)*$O56; $Oaa=$Oa9; $lab=floor(($Oaa-$laa)/$O56)+1; if ($lab == 0) $Oab=1; $lac="(CASE"; $Oac=$laa; for ($l3v=0; $l3v<$lab; $l3v ++) { $lad=$Oac+$O56; $lac.=l1d."WHEN $Oac <= $O48 AND $O48 < $lad THEN $Oac"; $Oac=$lad; } } else { $l5g=date_create(gmstrftime("%Y-%m-%d %H:%M:%S",$la9),new \datetimezone("UTC")); $O5g=(array) $l5g; $Oa6=max(1,round(substr($O56,0,strlen($O56)-1)))*1; $l4k=substr($O56,strlen($O56)-1); assert($Oa6>0,"The date step is positive (value given: $Oa6)\n"); assert(array_key_exists($l4k,$O5e) !== FALSE,"The period definition is one of the 7 valid one (value given: $l4k)\n"); $O56=$la6($Oa6,$l4k,$la9,$Oa9); l4l($l5g,$l4k); $laa=date_timestamp_get($l5g); $Oaa=$Oa9; $lac="(CASE"; $Oac=$laa; while ($Oac<=$Oaa) { date_modify($l5g,"$Oa6 ".$O5e[$l4k]); $O5g=(array) $l5g; $lad=date_timestamp_get($l5g); $Oad=$Oac; $lac.=l1d."WHEN $Oac <= $O48 AND $O48 < $lad THEN $Oad"; $Oac=$lad; } } $Oa3=$lac."\nEND)"; } } return array("sqlclause" => $Oa3,"interval" => $O56); } function l9z($O69,$l31,$O98,&$O5a,$O3a,$l98) { $O5a[$O3a]=O9x($O69,$l31,$O98,$O5a[$O3a],$l98); $l9y=O3x($O5a[$O3a]["ofield"]); $lae=$O5a[$O3a]["ifield_parsed"]." as ".$l9y; $Oae="GROUP BY ".$O5a[$O3a]["ifield_parsed"]; return array("field" => $lae,"statement" => $Oae); } function l9o($l98,$la3=FALSE) { $O9n=""; if ($la3 === TRUE) { foreach (array_keys($l98) as $laf) { $O9n.=l1d.",".O3x($laf); } } else { foreach ($l98 as $laf => $Oaf) { $O9n.=l1d.",".$Oaf." as ".O3x($laf); } } return $O9n; } function O9o($l31,$O98,$lag,$Oae,$Oag) { $lah=""; if (strlen($lag)>0) { $lah=","; } $l9i=l1d.$lag.l1d.$lah."count(*) as _count".$Oag."\nFROM ".$l31."\n".$O98."\n".$Oae; return $l9i; } function la0($O9z,$Oah="_count") { return str_ireplace("count(*)",$Oah,$O9z); } function l9f($l9e,$O37=NULL) { assert($l9e !== NULL,"The number of total hits is not null"); $lai="{"; $Oai="\"took\":0,"."\"timed_out\":false,"."\"_shards\":{"."\"total\":5,"."\"successful\":5,"."\"failed\":0"."},"; $laj="\"hits\":{"."\"total\":".$l9e.","."\"max_score\":0,"."\"hits\":"; l37($lai.$Oai.$laj,$O37=$O37); } function l9s($O55,$O3a,$O51,$O37=NULL) { $Oaj=""; $l9j=","; if ($O3a == 0) $l9j=""; $l36=$l9j.O3x($O51).":{"; switch ($O55) { case ("t"): $l36.="\"doc_count_error_upper_bound\":0,"; $l36.="\"sum_other_doc_count\":0,"; $Oaj="["; break; case ("g"): case ("h"): case ("hd"): $Oaj="["; break; case ("r"): case ("rd"): $Oaj="{"; break; default : break; } $l36.="\"".O26."\":".$Oaj; l37($l36,$O37=$O37); } function O9s($O55,$lak,$l9j,$O37=NULL) { Oak($O55,$lak,$l9j,$O37=$O37); O9p($lak,$l9q=2,$lal=",",$O37=$O37); } function Oak($O55,$lak,$l9j="",$O37=NULL) { $l3e=array_keys($lak); $O3c=$lak[$l3e[0]]; $l36=$l9j; switch ($O55) { case ("t"): case ("g"): case ("h"): case ("hd"): $l36.="{"; if (O35($O3c) === FALSE) $Oal=O3x($O3c); else { if ($O55 == "hd") { if (PHP_SAPI !== "cli") { $O3c=l4f($O3c); } $Oal=$O3c*01750; } else $Oal=$O3c; } $l36.="\"key\":".$Oal.","; break; case ("r"): case ("rd"): $l36.=O3x($O3c).":{"; $l5h=l4m($O3c); $O4o=$l5h[0]; $l4p=$l5h[1]; if ($O55 == "rd") { if (PHP_SAPI !== "cli") { $O4o=l4f($O4o); $l4p=l4f($l4p); } $O4o=$O4o*01750; $l4p=$l4p*01750; } $l36.="\"from\":".$O4o.","; $l36.="\"from_as_string\":".O3x($O4o).","; $l36.="\"to\":".$l4p.","; $l36.="\"to_as_string\":".O3x($l4p).","; break; default : break; } $l36.="\"doc_count\":".$lak["_count"]; l37($l36,$O37=$O37); } function O9p($lak,$l9q=2,$l9j=",",$O37=NULL) { $l3e=array_keys($lak); $lam=count($lak); $l36=""; for ($l3v=$l9q; $l3v<$lam; $l3v ++) { $O48=$l3e[$l3v]; $O3c=$lak[$l3e[$l3v]]; $l36.=$l9j.O3x($O48).":{"; if ($O3c === NULL || $O3c === "") $l36.="\"value\":null"; else $l36.="\"value\":".$O3c; $l36.="}"; $l9j=","; } l37($l36,$O37=$O37); } function O9v($O55,$O37=NULL) { $Oam=""; switch ($O55) { case ("t"): case ("g"): case ("h"): case ("hd"): $Oam="]"; break; case ("r"): case ("rd"): $Oam="}"; break; default : break; } $l36=$Oam."}"; l37($l36,$O37=$O37); }