<?php
/*
JSON_SQL_Bridge
Copyright 2016 Frank Vanden berghen
All Right reserved.

JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License".
If you are interested in distributing, reselling, modifying, contibuting or in general creating
any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
*/
namespace kibella; require_once __DIR__."/constants.php"; require_once __DIR__."/globals.php"; require_once __DIR__."/functionsdb.php"; require_once __DIR__."/functionsaux.php"; require_once __DIR__."/functionsauxkibella.php"; require_once __DIR__."/functionsmsg.php"; function l8i($O7w,$la,$Oa) { $l3p=json_decode($O7w,TRUE); $l3k=O3k($la,$Oa); $O75=Oi($l3k); $Of=O3o($l3p,"kibella\\parseEsJsonQueryElement",array("fieldtypes" => $O75)); return $Of; } function parseesjsonqueryelement($l3t,$O55,$O3q,$l3r,$O3r,$l3q) { static $O8i; static $l8j; static $O8j; static $l8k; static $O8k; static $l8l; static $O8l; static $l8m; static $O8m; static $l8n; static $O8n; static $l8o; static $O8o; static $l8p; static $O8p; static $l8q; static $O8q; static $l8r; static $O8r; static $l8s; static $O8s; static $l8t; static $O8t; static $l8u; static $O8u; static $l8v; static $O8v; static $l8w; static $O8w; static $l8x; static $O8x; static $l8y; static $O8y; static $l8z; static $O8z; static $l90; static $O90; static $l91; static $O91; static $l92; static $O92; global $l93; global $O93; if ($O3q == 0 && $l3r == 0) { $O8i=array(); $l8j=array(); $O8j=array(); $l8k=array("level" => 0,"context" => array(O31),"idx" => array(-1),"size" => array($O3r)); $l8l=array(); $O8l=FALSE; $l8m=FALSE; $O8m=FALSE; $l8n=-1; $O8n=NULL; $l8o=NULL; $O8o=NULL; $l8p=NULL; $O8p=NULL; $l8q=NULL; $O8q=DISCOVERSIZE; $l8r=NULL; $O8r=NULL; $l8s=NULL; $l8t=NULL; $O8s=NULL; $O8t=NULL; $l8u=NULL; $O8u=NULL; $l8v=l2j; $O8v=""; $l8w=NULL; $O8w=NULL; $l8x=NULL; $O8x=""; $l8y=""; $O8y=NULL; $l8z=""; $O8z=NULL; $l90=NULL; $O90=NULL; $l91=NULL; $O91=NULL; $l92=NULL; $O92=""; if (array_key_exists("fieldtypes",$l3q)) $O8i=$l3q["fieldtypes"]; } if ($l3r>$l8k["level"]) { return $O8k; } $l8k["idx"][$l8k["level"]]++; if (is_array($l3t) && count($l3t)>0) { $l8k["level"]++; $l56=$l8k["context"][$l8k["level"]-1]; $O55=l55($O55,$l56); if (array_search(NULL,$l93[$l56]) !== FALSE || array_search(( string) $O55,$l93[$l56]) !== FALSE || $l56 == l2o && array_search(( string) $O55,$l93[l2o][0]) !== FALSE) { if ($O55 === O2n) { $l8n ++; } else if ($O55 === l2w) { $O8l=TRUE; } switch ($l56) { case (O2n): $l8u=$O55; $l8k["context"][]=l2o; $l90="(CASE"; break; case (l2o): if ($O3s=array_search($O55,$l93[l2o][0]) !== FALSE) { $O91=$O93[$O55]; $l8k["context"][]=l33; } else if ($O3s=array_search($O55,array_slice($l93[l2o],1)) !== FALSE) { $l8k["context"][]=$O55; } else showwarninginvalidkeyword($O55,$l56,$l93,"COMPOUND",2); break; case (O2p): if ($O55 === O2x) $O8v=""; else if ($O55 === l2y) $O8v=" not "; $l8k["context"][]=$O55; break; case (l2t): if (strpos($O55,"(CASE WHEN ") === 0) { $O8s=$O55; } else { $O8s=l4d($O55); } $l8k["context"][]=O2t; break; case (l2u): $l8t=l4d($O55); $l8k["context"][]=O2u; break; case (l2r): $l94=l4d($O55); $O94=O4l($O55); $O8r=l4d($O94."_".l38); $l8s=l4d($O94."_".O37); $l8k["context"][]=l2s; break; case (l2s): switch (( string) $O55) { case (O2r): case (O2s): $l8k["context"][]=$O55; break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; default : if (gettype($O55) == "integer") { $l95=end($l8k["size"]); reset($l8k["size"]); if ($l95>1) { $O3q=$O55; if ($O3q == $l95-1) { $l8y=")"; } if ($O3q == 0) { $O8x="("; } else { $l8v=" and "; $O8x=""; if ($O3q<$l95-1) $l8y=""; } } $l8k["context"][]=$l56; } else $l8k["context"][]=$O55; break; } } else { showwarninginvalidkeyword($O55,$l56,$l93,"COMPOUND",1); $l8k["context"][]=$l56; } if (DEBUG) { echo "CONTEXT history\n"; print_r($l8k["context"]); } $l8k["idx"][]=-1; $l8k["size"][]=count($l3t); $l56=$l8k["context"][$l8k["level"]]; if (DEBUG) echo "Keyword: $O55 => Entering context ".$l56."... (field aggregation level is $l8n)\n"; } else { $l3r=$l8k["level"]; $O4m=$l8k["idx"][$l3r]; $l95=$l8k["size"][$l3r]; $l56=$l8k["context"][$l3r]; $O55=l55($O55,$l56); switch ($l56) { case (O2w): case (l2x): $l8j[$l8n]["ofield"]=$l8u; if ($l56 == O2w) $l8j[$l8n]["type"]="h"; else $l8j[$l8n]["type"]="hd"; $l8j[$l8n]["order"]=l4d($l8u); $l8j[$l8n]["limit"]=0; switch (( string) $O55) { case (O35): $O8t=l4d($l3t); $l8j[$l8n]["ifieldname"]=$O8t; $l8j[$l8n]["ifield"]=$O8t; break; case (O39): $l8j[$l8n]["interval"]=$l3t; break; case (O3b): break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; case (O2v): $l8j[$l8n]["ofield"]=$l8u; $l8j[$l8n]["type"]="g"; $l8j[$l8n]["order"]=l4d($l8u); $l8j[$l8n]["limit"]=0; switch (( string) $O55) { case (O35): $O8t=$l3t; $l8j[$l8n]["ifieldname"]=l4d(O4l($O8t)); break; case (O3c): $l8j[$l8n]["ifield"]=l4d(O4l($O8t)."_geohash".$l3t); break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; case (O2r): switch (( string) $O55) { case (O37): $l8p=$l3t; break; case (l38): $O8n=$l3t; break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; case (O2s): switch (( string) $O55) { case (O37): $O8o=$l3t; break; case (l38): $l8o=$l3t; break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; case (O2t): switch (( string) $O55) { case (l3c): $l8v=$l3t; break; case (l3d): $l92=l4g($l3t); break; case (l3f): if ($l3t === "phrase") $l8z="'"; else $l8z=""; break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; case (l2z): if ($O55 === l34) { $l8x=$O93[l2l]."(*)"." ".$l3t; } else { $l8x=l4d($O55)." ".$l3t; } assert(!is_null($l8j[$l8n]["ifield"]),"The aggregation field name is NOT null"); $l8j[$l8n]["order"]=$l8x.", ".$l8j[$l8n]["ifield"]; break; case (l30): switch (( string) $O55) { case (O33): break; case (l3d): if ($l3t === "*") $O8y="1 = 1"; else $O8y=$l3t; $l8l[]=trim($O8y); break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; case (O2o): case (l2p): $l8j[$l8n]["ofield"]=$l8u; if ($l56 == O2o) { $l8j[$l8n]["type"]="r"; } else { $l8j[$l8n]["type"]="rd"; } $l8j[$l8n]["order"]=l4d($l8u); $l8j[$l8n]["limit"]=0; switch (( string) $O55) { case (O35): $O8t=l4d($l3t); $l8j[$l8n]["ifieldname"]=$O8t; break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; case (O2u): switch (( string) $O55) { case (O36): $O8u=$l3t; break; case (O38): case (l39): $l8q=O56($l3t,$l8t,$O8i,"date","/1000"); if ($O55 === O3a) $l8w=">"; else $l8w=">="; break; case (O3a): case (l3b): $O8p=O56($l3t,$l8t,$O8i,"date","/1000"); if ($O55 === O3a) $O8w="<"; else $O8w="<="; break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; case (l31): switch (( string) $O55) { case (l37): if ($l8j[$l8n]["type"] == "rd") { $l3t=l4t($l3t); } $O8z=$l3t; $O90=$l3t."-"; break; case (O3e): if ($l8j[$l8n]["type"] == "rd") { $l3t=l4t($l3t); } $l91=$l3t; $O90.=$l3t; $l90.=O1w."WHEN ".$O8z." <= ".$O8t." AND ".$O8t." < ".$l91." THEN "."'".$O90."'"; $l8j[$l8n]["ranges"][]=$O90; break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; case (O31): if ($O55 === l3e) { $O8q=$l3t; } else showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; case (l33): switch (( string) $O55) { case (O35): $l8r=l4d($l3t); break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; case (O32): $l8j[$l8n]["ofield"]=$l8u; $l8j[$l8n]["type"]="t"; switch (( string) $O55) { case (O35): $O8t=l4d($l3t); $l8j[$l8n]["ifieldname"]=$O8t; $l8j[$l8n]["ifield"]=$O8t; break; case (l3e): $O8q=$l3t; $l8j[$l8n]["limit"]=$O8q; break; default : showwarninginvalidkeyword($O55,$l56,$l93,"LEAF"); break; } break; default : showwarninginvalidcontext($l56,"LEAF"); break; } while ($O4m == $l95-1 && $l3r>=0) { if (DEBUG) echo "\tRemoving data from level: ".$l3r."\n"; $l3r --; $l8k["level"]=$l3r; foreach (array_slice($l8k,1) as $O95 => $l96) { array_pop($l8k[$O95]); } assert($l3r>=-1,"\$level >= -1"); if ($l3r>=0) { switch ($l56) { case (l2o): $l8r=NULL; $l8u=NULL; $O91=NULL; break; case (O2o): case (l2p): assert(!is_null($l90) && !is_null($l8u),"C_AGGS_RANGE: Range grouping ($l90), FieldOut ($l8u) are not null"); $l90.="\nEND)"; $l8j[$l8n]["ifield"]=$l90; break; case (O2r): case (O2s): case (O2t): case (O2u): case (l30): if ($l56 == O2r && !is_null($O8r) && !is_null($l8s) && !is_null($O8n) && !is_null($l8p)) { if (!$O8m) { $O96="("; $l97=""; } else { $O96=""; $l97=")"; } $O8y=$O96.$l8p." <= ".$l8s." and ".$O8r." <= ".$O8n.$l97; $l8m=TRUE; } else if ($l56 == O2s && !is_null($O8r) && !is_null($l8s) && !is_null($l8o) && !is_null($O8o)) { if (!$l8m) { $O96="("; $l97=""; } else { $O96=""; $l97=")"; } $O8y=$O96.$l8o." <= ".$O8r." and ".$l8s." <= ".$O8o.$l97; $O8m=TRUE; } else if ($l56 == O2t && !is_null($O8s) && !is_null($l92)) { $O8y=$O8s." = ".$l8z.l4f($l92).$l8z; } else if ($l56 == O2u && !is_null($l8q) && !is_null($O8p)) { $O8y= "$l8t $l8w $l8q and $l8t $O8w $O8p"; } $O97=$O8x.$O8v; if ($O92 == "") $O92="WHERE"; else { if (($l8m+$O8m)<2) $O97=$l8v.$O8x.$O8v; else $O97=$l8v.$O8x; } if (!is_null($O8y)) { $O92.="\n".$O97."(".$O8y.")".$l8y; } $l8l[]=trim($O8v.$O8y); $O8x=""; $l8y=""; $l8v=l2j; $l8w=NULL; $O8w=NULL; if ($l8m && $O8m) { $O8r=NULL; $l8s=NULL; $l8m=FALSE; $O8m=FALSE; } $O8n=NULL; $l8o=NULL; $O8o=NULL; $l8p=NULL; $O8p=NULL; $l8q=NULL; $O8s=NULL; $l8t=NULL; $l92=NULL; $O8y=NULL; break; case (l2z): assert(!is_null($l8x),"C_ORDER: Order statistic ($l8x) is not null"); break; case (l33): assert(!is_null($l8r) && !is_null($l8u) && !is_null($O91),"C_STATISTIC: Field ($l8r), FieldOut ($l8u), Statistic ($O91) are not null"); $l97=str_repeat(")",substr_count($O91,"(")); $O8j[$l8u]=$O91."(".l4n($l8r,$O8i).")".$l97; $l8r=NULL; break; case (O32): assert(!is_null($O8t) && !is_null($l8u),"C_TERMS: Grouping field ($O8t), FieldOut ($l8u) are not null"); break; default : break; } $O4m=$l8k["idx"][$l3r]; $l95=$l8k["size"][$l3r]; if ($l56 == O2n) { $l8n --; } $l56=$l8k["context"][$l3r]; } else { if (DEBUG) echo "REACHED LAST KEY-VALUE PAIR\n"; if ($O8l === TRUE) { $O8q=DISCOVERSIZE; } $O8k=array("xaggs" => $l8j,"yaggs" => $O8j,"filterArray" => $l8l,"filter" => $O92,"discover" => array("tab" => $O8l,"limit" => $O8q)); return $O8k; } } } } function l98($O98) { $l99=array(); foreach ($O98["xaggs"] as $O5o) { $l99[]=O3t($O5o); } $l99[]=O3t($O98["yaggs"]); $l99[]=$O98["filterArray"]; sort($l99[count($l99)-1]); $l99[]=O3t($O98["discover"]); return $l99; } function l80($la,$Oa,$O13,$O99,$l1i) { $l3k=O3k($la,$Oa); $l5o=$O99["xaggs"]; $l9a=$O99["yaggs"]; $O9a=$O99["filter"]; $l9b=array_key_exists("onerec",$O99); $O9b=$O99["discover"]; $l9c=$O99["discover"]["limit"]; $O9c=fopen($l1i,"wt"); if (!$O9c) { showmessage( __FUNCTION__ ,TAG_ERROR,"Error opening or creating file $l1i\n. An empty response will be returned.\n"); return ""; } $l9d=dbcreatedbconnection($Oa,$O13=$O13,$l6q=array("dir" => DATADIR)); $O9d=l9e($l9d,$la,$O9a,$l9b); if (O9e($O99,$l5o,$l9a)) { l9f($l9d,$la,$l3k,$O9a,$O9d,$l9c,$l3o=$O9c); } else if (count($l5o)+count($l9a)>0) { O9f($l9d,$la,$O9a,$l5o,$l9a,$O9d,$l3o=$O9c); } else { $l9g=O9g($l9d->getdbhandle(),$la,$O9a); l9h($l9g,$l3o=$O9c); O3n("[]}",$l3o=$O9c); } O3n("}",$l3o=$O9c); l6t($l9d,$O6t=FALSE); fclose($O9c); } function O9g($O12,$la,$O9a) { $O9h= "SELECT count(*) as \"_count\" from $la"."\n".$O9a; $l9i=dbdbhexecutesqlquery($O12,$O9h); if ($l9i === FALSE) { $l9g=0; } else { $l9g=$l9i[0]["_count"]; } if (DEBUG) { echo "\nTotal Hits:\n"; print_r($l9i); } return $l9g; } function O9e($O9i,$l5o,$l9a) { assert(array_key_exists("discover",$O9i) && array_key_exists("limit",$O9i["discover"]) && array_key_exists("filter",$O9i),"The required keys exist in the input array \$aParseResult"); return $O9i["discover"]["tab"] === TRUE && count($l5o) == 0 && count($l9a) == 0; } function l9f($l6l,$la,$l3k,$O9a,$l9j,$l9c,$l3o=NULL) { global $O9j; $l6p=O6p($l6l,$la); $l9k="SELECT ".l5a($l9c,$l6l->le ,$O5a=0)." * FROM ("."SELECT ".$O9j[l1v][$l6l->le ]." as ".l2f; $O75=Oi($l3k); $O72=array(); foreach ($O75 as $lj => $Oj) { if ($Oj === "date") { $l9k.=",".$lj." as ".$lj; $O72[]=str_replace("\"","",$lj); } else if ($Oj === "geo_point") { if (O6k($l6l,$l6p,$lj) === TRUE) $l9k.=",".$lj; } else { $l9k.=",".$lj; } } $O9k=$l9j."(".$l9k."\nFROM ".$l6p.") innerQueryWithRowNumber"."\n".$O9a."\n".l5a($l9c,$l6l->le ,$O5a=1).") mainQuery"; $O6y=O6z($l6l->getdbhandle(),$O9k); if ($O6y === FALSE) { l9h(0,$l3o=$l3o); O3n("[",$l3o=$l3o); } else { $l9l=""; $O9l=0; while ($l6g=O82($O6y)) { $O9l ++; if ($O9l == 1) { $l9g=$l6g["_count"]; l9h($l9g,$l3o=$l3o); O3n("[",$l3o=$l3o); } foreach ($O72 as $l9m) { $O9m=date_create(strftime("%Y-%m-%d %H:%M:%S",$l6g[$l9m])); $l4s=(array) $O9m; $O4s=timezone_offset_get(new \datetimezone($O9m->timezone),$O9m); $l6g[$l9m]=($l6g[$l9m]-$O4s)*01750; } $l9n=(PHP_INT_MAX-$O9l)/PHP_INT_MAX; $O9n=$l9l."{"."\"".l1z."\":\"".$l3k."\","."\"".O1z."\":\"row\","."\"".l20."\":\"".$O9l."\","."\"".l21."\":".$l9n.","."\"".O21."\":".json_encode($l6g)."}"; O3n($O9n,$l3o=$l3o); $l9l=","; } unset ($l6g); } unset ($O6y); O3n("]}",$l3o=$l3o); } function O9f($l6l,$la,$O9a,$l5o,$l9a,$l9j,$l3o=NULL) { if (count($l5o) == 0) { l9o($l6l,$la,$O9a,$l9a,$l9j,$l3o=$l3o); } else { $l9g=O9g($l6l->getdbhandle(),$la,$O9a); l9h($l9g,$l3o=$l3o); O3n("[]}",$l3o=$l3o); O3n(",\"aggregations\":{",$l3o=$l3o); O9o($l6l,$la,$O9a,$l5o,$l9a,$l3o=$l3o); } O3n("}",$l3o=$l3o); } function l9e($l6l,$la,$O9a,$l9b) { if ($l9b) { $l9p="WITH cnt as (SELECT ".l5a(1,$l6l->le ,$O5a=0)." 1 as \"_count\" FROM $la ".l5a(1,$l6l->le ,$O5a=1).")"."\nSELECT * FROM cnt"."\nCROSS JOIN "; } else { $l9p="WITH cnt as (SELECT count(*) as \"_count\" FROM ".$la." ".$O9a.")"."\nSELECT * FROM cnt"."\nCROSS JOIN "; } return $l9p; } function l9o($l6l,$la,$O9a,$l9a,$l9j,$l3o=NULL) { $O9p=l9q($l9a); $l9k=O9q($la,$O9a,"","",$O9p); $O9k=$l9j."(SELECT ".$l9k.") mainQuery"; $l9r=dbdbhexecutesqlquery($l6l->getdbhandle(),$O9k,$O5="query"); if ($l9r === FALSE) { l9h(0,$l3o=$l3o); O3n("[]",$l3o=$l3o); } else { assert(count($l9r) == 1,"There is exactly one row returned by the only-Y-axis-aggregations query"); $l9g=$l9r[0]["_count"]; l9h($l9g,$l3o=$l3o); O3n("[]}",$l3o=$l3o); O3n(",\"aggregations\":{",$l3o=$l3o); O9r($l9r[0],$l9s=1,$l9l="",$l3o=$l3o); } } function O9o($l6l,$la,$O9a,$l5o,$l9a,$l3o=NULL) { $O9p=l9q($l9a); O9s($l6l,$la,$O9a,$l5o,0,$l9a,$O9p,$l3o=$l3o); } function O9s($l6l,$la,$O9a,$l5o,$l3r,$l9a,$O9p,$l3o=NULL) { assert($l3r>=0,"Grouping level is non-negative"); assert(count($l5o)>$l3r,"The xaggs array has more than \$level elements (count(\$xaggs)=".count($l5o).", level=$l3r)"); $O9k=l9t($l6l,$la,$O9a,$l5o,$l3r,$l9a); $O6y=O6z($l6l->getdbhandle(),$O9k); $l6g=O82($O6y); $l9l=""; $O9t=0; if ($l6g) { l9u($l5o[$l3r]["type"],$l3r,$l5o[$l3r]["ofield"],$l3o=$l3o); do { O9u($l5o[$l3r]["type"],$l6g,$l9l,$l3o=$l3o); $l9v=($l3r == count($l5o)-1); if (!$l9v) { $O9v=$l6g[$l5o[$l3r]["ofield"]]; $l9w=O9w($O9a,$l5o,$l3r,$O9v); $l9x=dbcreatedbconnection($l6l->l1d(),$O13=$l6l->O13 ,$l6q=array("dir" => ""),$O6q=array("new" => TRUE)); O9s($l9x,$la,$l9w,$l5o,$l3r+1,$l9a,$O9p,$l3o=$l3o); unset ($l9x); } O3n("}",$l3o=$l3o); $l6g=O82($O6y); $l9l=","; } while ($l6g); O9x($l5o[$l3r]["type"],$l3o=$l3o); } unset ($l6g); unset ($O6y); } function O9w($O9a,$l5o,$l3r,$O9v) { $l9y=$l5o[$l3r]["ifield_parsed"]; $O9y=$l5o[$l3r]["type"]; if ($O9y == "t" || $O9y == "r" || $O9y == "rd") $l9z="'".l4f($O9v)."'"; else $l9z=$O9v; if (preg_match("/^\\s*WHERE/",$O9a)>0) { $O55=" AND "; } else { $O55="WHERE "; } return $O9a.$O55.$l9y." = ".$l9z; } function l9t($l6l,$la,$O9a,&$l5o,$l3r,$l9a) { $l5o[$l3r]=O9z($l6l,$la,$O9a,$l5o[$l3r],$l9a); $la0=l4d($l5o[$l3r]["ofield"]); $Oa0=la1($l6l,$la,$O9a,$l5o,$l3r,$l9a); $O9p=l9q($l9a); $l9k=O9q($la,$O9a,$Oa0["field"],$Oa0["statement"],$O9p); $O9k=""; if ($l5o[$l3r]["type"] == "r" or $l5o[$l3r]["type"] == "rd") { $O9k.="\nSELECT".$l5o[$l3r]["ranges_clause"]." r"."\nLEFT JOIN (".O1w."SELECT ".$l9k.O1w."\t) d"."\nON r.\"_range\" = d.".$la0; } else { $O9k.="\nSELECT ".l5a($l5o[$l3r]["limit"],$l6l->le ,$O5a=0).$l9k; } assert($l5o[$l3r]["order"] != NULL && $l5o[$l3r]["order"] != "","Order variable is not null nor empty"); $Oa1=la2($l5o[$l3r]["order"]); $O9k.="\nORDER BY ".$Oa1."\n".l5a($l5o[$l3r]["limit"],$l6l->le ,$O5a=1); return $O9k; } function O9z($l6l,$la,$O9a,$Oa2,$l9a) { switch ($Oa2["type"]) { case ("r"): case ("rd"): $la3=Oa3($l6l,$Oa2["ofield"],$Oa2["ranges"],$l9a); $Oa2["order"]=$la3["order"]; $Oa2["ifield_parsed"]=$Oa2["ifield"]; $Oa2["ranges_clause"]=$la3["sqlclause"]; break; case ("h"): case ("hd"): $la3=la4($l6l,$la,$O9a,$Oa2["ifield"],$Oa2["type"],$Oa2["interval"]); $Oa2["ifield_parsed"]=$la3["sqlclause"]; $Oa2["interval"]=$la3["interval"]; break; default : $Oa2["ifield_parsed"]=$Oa2["ifield"]; break; } return $Oa2; } function Oa3($l6l,$O5f,$Oa4,$l9a) { assert(count($Oa4)>0,"There is at least one RANGE value"); global $O9j; $la0=l4d($O5f); $O9p=l9q($l9a,$la5=TRUE); $Oa5=O1w."\"_range\" as ".$la0.O1w.",".$O9j[O1v][$l6l->le ]."(\"_count\",0) as \"_count\"".$O9p."\nFROM ("; $la6=""; foreach ($Oa4 as $O4y) { $Oa6=l4y($O4y); $la7=$Oa6[0]; if ($la7 === "") $la7="NULL"; $Oa5.=$la6."\nSELECT '$O4y' as \"_range\", $la7 as \"_range_from\"".$O9j[l1w][$l6l->le ]; $la6="\nUNION "; } $Oa5.="\n)"; if (DEBUG) { echo "SQL for _RANGES:\n"; echo $Oa5."\n"; } return array("sqlclause" => $Oa5,"order" => "\"_range_from\""); } function la4($l6l,$la,$O9a,$lj,$Oa7,$l5k) { global $O5r; assert($Oa7 === "h" || $Oa7 === "hd","The histogram aggregation type is either 'h' or 'hd'"); $la8= function (&$Oa8,&$l5t,$la9,$Oa9) { $laa=$Oa9-$la9; if ($l5t === "s" && $laa>l24) { $Oa8=1; $l5t="m"; } if ($l5t === "m" && $laa/074>l24) { $Oa8=1; $l5t="h"; } $l5k=$Oa8.$l5t; return $l5k; }; $O9k= "SELECT min($lj) as \"_min\", max($lj) as \"_max\" FROM $la $O9a"; $Oaa=dbdbhexecutesqlquery($l6l->getdbhandle(),$O9k,$O5="query"); if ($Oaa === FALSE || count($Oaa) == 0) { $Oa5=""; } else { $lab=$Oaa[0]["_min"]; $Oab=$Oaa[0]["_max"]; if ($lab === "" || $Oab === "") { $Oa5="(CASE WHEN 1 THEN null END)"; } else { if ($Oa7 == "h") { assert($l5k>0,"The histogram interval value (bin size) is positive"); $lac=floor($lab/$l5k)*$l5k; $Oac=$Oab; $lad=floor(($Oac-$lac)/$l5k)+1; if ($lad == 0) $Oad=1; $lae="(CASE"; $Oae=$lac; for ($O4a=0; $O4a<$lad; $O4a ++) { $laf=$Oae+$l5k; $lae.=O1w."WHEN $Oae <= $lj AND $lj < $laf THEN $Oae"; $Oae=$laf; } } else { $l5t=date_create(gmstrftime("%Y-%m-%d %H:%M:%S",$lab),new \datetimezone("UTC")); $O5t=(array) $l5t; $Oa8=max(1,round(substr($l5k,0,strlen($l5k)-1)))*1; $l4w=substr($l5k,strlen($l5k)-1); assert($Oa8>0,"The date step is positive (value given: $Oa8)\n"); assert(array_key_exists($l4w,$O5r) !== FALSE,"The period definition is one of the 7 valid one (value given: $l4w)\n"); $l5k=$la8($Oa8,$l4w,$lab,$Oab); l4x($l5t,$l4w); $lac=date_timestamp_get($l5t); $Oac=$Oab; $lae="(CASE"; $Oae=$lac; while ($Oae<=$Oac) { date_modify($l5t,"$Oa8 ".$O5r[$l4w]); $O5t=(array) $l5t; $laf=date_timestamp_get($l5t); $Oaf=$Oae; $lae.=O1w."WHEN $Oae <= $lj AND $lj < $laf THEN $Oaf"; $Oae=$laf; } } $Oa5=$lae."\nEND)"; } } return array("sqlclause" => $Oa5,"interval" => $l5k); } function la1($l6l,$la,$O9a,&$l5o,$l3r,$l9a) { $l5o[$l3r]=O9z($l6l,$la,$O9a,$l5o[$l3r],$l9a); $la0=l4d($l5o[$l3r]["ofield"]); $lag=$l5o[$l3r]["ifield_parsed"]." as ".$la0; $Oag="GROUP BY ".$l5o[$l3r]["ifield_parsed"]; return array("field" => $lag,"statement" => $Oag); } function l9q($l9a,$la5=FALSE) { $O9p=""; if ($la5 === TRUE) { foreach (array_keys($l9a) as $lah) { $O9p.=O1w.",".l4d($lah); } } else { foreach ($l9a as $lah => $Oah) { $O9p.=O1w.",".$Oah." as ".l4d($lah); } } return $O9p; } function O9q($la,$O9a,$lai,$Oag,$Oai) { $laj=""; if (strlen($lai)>0) { $laj=","; } $l9k=O1w.$lai.O1w.$laj."count(*) as \"_count\"".$Oai."\nFROM ".$la."\n".$O9a."\n".$Oag; return $l9k; } function la2($Oa1,$Oaj="\"_count\"") { return str_ireplace("count(*)",$Oaj,$Oa1); } function l9h($l9g,$l3o=NULL) { assert($l9g !== NULL,"The number of total hits is not null"); $lak="{"; $Oak="\"took\":0,"."\"timed_out\":false,"."\"_shards\":{"."\"total\":5,"."\"successful\":5,"."\"failed\":0"."},"; $lal="\"hits\":{"."\"total\":".$l9g.","."\"max_score\":0,"."\"hits\":"; O3n($lak.$Oak.$lal,$l3o=$l3o); } function l9u($Oj,$l3r,$O5f,$l3o=NULL) { $Oal=""; $l9l=","; if ($l3r == 0) $l9l=""; $O3m=$l9l.l4d($O5f).":{"; switch ($Oj) { case ("t"): $O3m.="\"doc_count_error_upper_bound\":0,"; $O3m.="\"sum_other_doc_count\":0,"; $Oal="["; break; case ("g"): case ("h"): case ("hd"): $Oal="["; break; case ("r"): case ("rd"): $Oal="{"; break; default : break; } $O3m.="\"".l2q."\":".$Oal; O3n($O3m,$l3o=$l3o); } function O9u($Oj,$lam,$l9l,$l3o=NULL) { Oam($Oj,$lam,$l9l,$l3o=$l3o); O9r($lam,$l9s=2,$lan=",",$l3o=$l3o); } function Oam($Oj,$lam,$l9l="",$l3o=NULL) { $O3u=array_keys($lam); $l3t=$lam[$O3u[0]]; $O3m=$l9l; switch ($Oj) { case ("t"): case ("g"): case ("h"): case ("hd"): $O3m.="{"; if (l3m($l3t) === FALSE) $Oan=l4d($l3t); else { if ($Oj == "hd") { if (PHP_SAPI !== "cli") { $l3t=l4r($l3t); } $Oan=$l3t*01750; } else $Oan=$l3t; } $O3m.="\"key\":".$Oan.","; break; case ("r"): case ("rd"): $O3m.=l4d($l3t).":{"; $l5u=l4y($l3t); $O50=$l5u[0]; $l51=$l5u[1]; if ($Oj == "rd") { if (PHP_SAPI !== "cli") { $O50=l4r($O50); $l51=l4r($l51); } $O50=$O50*01750; $l51=$l51*01750; } $O3m.="\"from\":".$O50.","; $O3m.="\"from_as_string\":".l4d($O50).","; $O3m.="\"to\":".$l51.","; $O3m.="\"to_as_string\":".l4d($l51).","; break; default : break; } $O3m.="\"doc_count\":".$lam["_count"]; O3n($O3m,$l3o=$l3o); } function O9r($lam,$l9s=2,$l9l=",",$l3o=NULL) { $O3u=array_keys($lam); $lao=count($lam); $O3m=""; for ($O4a=$l9s; $O4a<$lao; $O4a ++) { $lj=$O3u[$O4a]; $l3t=$lam[$O3u[$O4a]]; $O3m.=$l9l.l4d($lj).":{"; if ($l3t === NULL || $l3t === "") $O3m.="\"value\":null"; else $O3m.="\"value\":".$l3t; $O3m.="}"; $l9l=","; } O3n($O3m,$l3o=$l3o); } function O9x($Oj,$l3o=NULL) { $Oao=""; switch ($Oj) { case ("t"): case ("g"): case ("h"): case ("hd"): $Oao="]"; break; case ("r"): case ("rd"): $Oao="}"; break; default : break; } $O3m=$Oao."}"; O3n($O3m,$l3o=$l3o); }