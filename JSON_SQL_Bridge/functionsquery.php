<?php
/*
KIBELLA 1.0
Copyright 2016 Frank Vanden berghen
All Right reserved.

Kibella is not a free software. The Kibella software is NOT licensed under the "Apache License". 
If you are interested in distributing, reselling, modifying, contibuting or in general creating 
any derivative work from Kibella, please contact Frank Vanden Berghen at frank@timi.eu.
*/
namespace kibella; function O9b($l9c) { return array_sum(array_map( function ($O9c) { return $O9c->isrunning(); } ,$l9c)); } function l9d($O9d) { $l6f=explode("\n",$O9d); if (count($l6f)<2) { O29( __FILE__ ,"error","The request body of the POST data is not valid. It should have at least 2 elements but ".count($l6f)." were found.\nProgram aborts.\n"); } else { $l9e=floor(count($l6f)/2); echo "{\"responses\":["; $O9e=array(); $l9f=array(); $O9f=array(); $l9g=NULL; $O9g=array(); $l9h=array(); $O9h=-1; $l9i=-1; for ($O9i=0; $O9i<$l9e; $O9i ++) { $l27=json_decode($l6f[2*$O9i],TRUE); $O22=$l27["index"]; $l6j=$l6f[2*$O9i+1]; $O9e[]=l4k($O22,$l6j); O6q($O22,$l6j,l9j($O9e[$O9i]["responseFiles"]["responseFileFinal"])); if ($O9e[$O9i]["cacheFileExists"] === FALSE) { $O9h ++; $l9h[]=array("type" => "run","index" => $O9h); $l9f[]=$O9e[$O9i]; if ($O9h == 0) { $l9g=$O9e[$O9i]; } else { $O9g[]=new O1($O9e[$O9i]); } } else { $l9i ++; $l9h[]=array("type" => "cache","index" => $l9i); $O9f[]=$O9e[$O9i]; } } if ($O9h>=1) { assert($l9g != NULL,"The first request to run is not null"); foreach ($O9g as $O9c) { $O9c->start(PTHREADS_INHERIT_ALL|PTHREADS_ALLOW_GLOBALS); } $O9j=l4($l9g); foreach ($O9g as $O9c) { $O9c->join(); } for ($O9i=0; $O9i<$l9e; $O9i ++) { if ($O9i>0) echo ","; $l9k=$l9h[$O9i]["index"]; if ($l9h[$O9i]["type"] == "run") { if ($l9k == 0) { $O9k=O6n($O9j["responseFile"]); if ($O9k === FALSE) O29( __FUNCTION__ ,"warning","PARALLEL RUN (FIRST JOB): The response file could not be read.\nCheck permissions on the file '".$l3."'.\n"); } else { assert($l9k-1<count($O9g),"The index to retrieve (".$l9k-1 .") is smaller than the number of elements of the aRequestJobsToRun array (".count($O9g).")"); $O9c=$O9g[$l9k-1]; $O9k=O6n($O9c->l6()); if ($O9k === FALSE) O29( __FUNCTION__ ,"warning","PARALLEL RUN: The response file could not be read.\nCheck permissions on the file '".$O9c->l6()."'.\n"); } } else { assert($l9k<count($O9f),"The index variable ($l9k) is smaller than the number of elements of the aRequestDetailsFromCache array (".count($O9f).")"); $l2=$O9f[$l9k]; $O3=l4($l2); $O9k=O6n($O3["responseFile"]); if ($O9k === FALSE) O29( __FUNCTION__ ,"warning","CACHE READ: The response file could not be read.\nCheck permissions on the file '".$l3."'.\n"); } } } else { for ($O9i=0; $O9i<$l9e; $O9i ++) { if ($O9i>0) echo ","; $O3=l4($O9e[$O9i]); $O9k=O6n($O3["responseFile"]); if ($O9k === FALSE) O29( __FUNCTION__ ,"warning","SEQUENTIAL RUN: The response file could not be read.\nCheck permissions on the file '".$l3."'.\n"); } } echo "]}"; } } function l4k($O22,$l6j,$O2=FALSE) { $l27=l4u($O22); if ($l27 === FALSE) { if ($O2) O29("",lc,"Table with table ID '$O22' was not found in the registered tables information."); l87(NULL,0); O2f("[]}}"); return FALSE; } $l22=$l27["table"]; $O21=$l27["db"]; $O4t=$l27["cache"]; $l9l=l7a($l6j,$l22,$O21); $O9l=O80($l9l); $l6k=O6k($O22,$O9l); if (!l6x(la) && (time()-l6x(O9))>Oa && file_exists(l6x(l9)) === TRUE) { @unlink(l6x(l9)); } $l9m=O6l($l6k,$O4t); return array("table" => $l22,"db" => $O21,"responseFiles" => $l6k,"parsedQuery" => $l9l,"cacheEnabled" => $O4t,"cacheFileExists" => $l9m); } function l4($O4j,$O2=FALSE) { $l22=$O4j["table"]; $O21=$O4j["db"]; $l6k=$O4j["responseFiles"]; $l47=$O4j["parsedQuery"]; $O4t=$O4j["cacheEnabled"]; $l9m=$O4j["cacheFileExists"]; if ($l9m === FALSE) { if (file_exists($l6k["responseFileTmp"])) { O9m($l6k["responseFileFinal"]); } else { O6m($l22,$O21,$l47,$l6k["responseFileTmp"]); l6n($l6k,$O4t); if ($O2) { echo "--------------------\n"; echo "Result from parseEsJsonRequest():\n"; print_r($l47); echo "--------------------\n"; echo "Result from generateEsJsonResponse():\n"; O6n($l6k["responseFileFinal"]); } } } return array("responseFile" => $l6k["responseFileFinal"],"parsedQuery" => $l47); }