<?php
/*
JSON_SQL_Bridge
Copyright 2016 Frank Vanden berghen
All Right reserved.

JSON_SQL_Bridge is not a free software. The JSON_SQL_Bridge software is NOT licensed under the "Apache License". 
If you are interested in distributing, reselling, modifying, contibuting or in general creating 
any derivative work from JSON_SQL_Bridge, please contact Frank Vanden Berghen at frank@timi.eu.
*/
namespace kibella; require_once __DIR__."/classes.php"; require_once __DIR__."/constantscfg.php"; require_once __DIR__."/globals.php"; require_once __DIR__."/functionsaux.php"; require_once __DIR__."/functionsdb.php"; require_once __DIR__."/functionsmsg.php"; require_once __DIR__."/functionsparse.php"; require_once __DIR__."/functionsserver.php"; function lap($Oap) { return array_sum(array_map( function ($laq) { return $laq->isrunning(); } ,$Oap)); } function Oaq($lar) { $O7s=explode("\n",$lar); if (count($O7s)<2) { showmessage( __FILE__ ,"error","The request body of the POST data is not valid. It should have at least 2 elements but ".count($O7s)." were found.\nProgram aborts.\n"); } else { $Oar=floor(count($O7s)/2); echo "{\"responses\":["; $las=array(); $Oas=array(); $lat=array(); $Oat=array(); $lau=array(); $Oau=-1; $lav=-1; for ($Oav=0; $Oav<$Oar; $Oav ++) { $l7r=json_decode($O7s[2*$Oav],TRUE); $l3k=$l7r["index"]; $O7w=$O7s[2*$Oav+1]; $las[]=l5z($l3k,$O7w); l83($l3k,$O7w,law($las[$Oav]["responseFiles"]["responseFileFinal"])); if ($las[$Oav]["cacheFileExists"] === FALSE) { $Oau ++; $lau[]=array("type" => "run","index" => $Oau); $Oas[]=$las[$Oav]; $Oaw=new l1f($las[$Oav],$l1h=FALSE); $Oat[]=$Oaw; } else { $lav ++; $lau[]=array("type" => "cache","index" => $lav); $lat[]=$las[$Oav]; } } if ($Oau>=1 && MULTITHREADING == 1) { foreach ($Oat as $laq) { $lax=$laq->start(PTHREADS_INHERIT_ALL|PTHREADS_ALLOW_GLOBALS); } foreach ($Oat as $laq) { $laq->join(); } for ($Oav=0; $Oav<$Oar; $Oav ++) { if ($Oav>0) echo ","; $Oax=$lau[$Oav]["index"]; if ($lau[$Oav]["type"] == "run") { assert($Oax<count($Oat),"The index corresponding to the job to retrieve (".$Oax.") is smaller than the number of elements of the aRequestJobsToRun array (".count($Oat).")"); $laq=$Oat[$Oax]; $lax=l81($laq->O1k()); if ($lax === FALSE) showmessage( __FUNCTION__ ,"warning","PARALLEL RUN: The response file could not be read.\nCheck permissions on the file '".$laq->O1k()."'.\n"); } else { assert($Oax<count($lat),"The index variable ($Oax) is smaller than the number of elements of the aRequestDetailsFromCache array (".count($lat).")"); $O1g=$lat[$Oax]; $O1i=l1j($O1g); $lax=l81($O1i["responseFile"]); if ($lax === FALSE) showmessage( __FUNCTION__ ,"warning","CACHE READ: The response file could not be read.\nCheck permissions on the file '".$l1i."'.\n"); } } } else { for ($Oav=0; $Oav<$Oar; $Oav ++) { if ($Oav>0) echo ","; $O1i=l1j($las[$Oav]); $lax=l81($O1i["responseFile"]); if ($lax === FALSE) showmessage( __FUNCTION__ ,"warning","SEQUENTIAL RUN: The response file could not be read.\nCheck permissions on the file '".$l1i."'.\n"); } } echo "]}"; } } function l5z($l3k,$O7w,$l1h=FALSE) { $l7r=l69($l3k); if ($l7r === FALSE) { if ($l1h) showmessage("",TAG_ERROR,"Table with table ID '$l3k' was not found in the registered tables information."); l9h(NULL,0); O3n("[]}}"); return FALSE; } $la=$l7r["table"]; $Oa=$l7r["db"]; $le=$l7r["dbengine"]; $O68=$l7r["cache"]; $lay=l8i($O7w,$la,$Oa); $Oay=l98($lay); $O7x=l7y($l3k,$Oay); if (!O86(l1p) && (time()-O86(O1o))>O1p && file_exists(O86(l1o)) === TRUE) { @unlink(O86(l1o)); } $laz=l7z($O7x,$O68); return array("table" => $la,"db" => $Oa,"dbengine" => $le,"responseFiles" => $O7x,"parsedQuery" => $lay,"cacheEnabled" => $O68,"cacheFileExists" => $laz); } function l1j($O5y,$l1h=FALSE) { $la=$O5y["table"]; $Oa=$O5y["db"]; $le=$O5y["dbengine"]; $O7x=$O5y["responseFiles"]; $O5m=$O5y["parsedQuery"]; $O68=$O5y["cacheEnabled"]; $laz=$O5y["cacheFileExists"]; if ($laz === FALSE) { if (file_exists($O7x["responseFileTmp"])) { Oaz($O7x["responseFileFinal"]); } else { global $O54; l80($la,$Oa,$O54[$le],$O5m,$O7x["responseFileTmp"]); O80($O7x,$O68); if ($l1h) { echo "--------------------\n"; echo "Result from parseEsJsonRequest():\n"; print_r($O5m); echo "--------------------\n"; echo "Result from generateEsJsonResponse():\n"; l81($O7x["responseFileFinal"]); } } } return array("responseFile" => $O7x["responseFileFinal"],"parsedQuery" => $O5m); }